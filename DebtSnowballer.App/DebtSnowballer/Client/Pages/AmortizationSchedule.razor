@page "/amortizationschedule"
@using DebtSnowballer.Client.ClientSideServices.FinancialFreedom
@using System.Text.Json

@inject IFinancialFreedomPlanner FinancialFreedomPlanner
@inject NavigationManager NavigationManager

<h1>Amortization Schedule</h1>

@foreach (var plan in DebtPayoffPlan.PaymentPlans)
    {
    <h3>@plan.Key</h3>
    <!-- Strategy Name -->
    <h4>Loan Details</h4>
    @foreach (var schedule in plan.Value)
        {
        <p>Name: @schedule.Name</p>
        <p>Bank Fees: @schedule.BankFees</p>
        <p>Annual Interest Rate: @schedule.AnnualInterestRate%</p>
        <p>Currency: @schedule.CurrencyCode</p>
        <p>Contracted Monthly Payment: @schedule.ContractedMonthlyPayment</p>
        <p>Total Interest Paid: @schedule.TotalInterestPaid</p>
        <p>Total Bank Fees Paid: @schedule.TotalBankFeesPaid</p>
        <p>Total Principal Paid: @schedule.TotalPrincipalPaid</p>
        }

    <table class="table">
        <thead>
            <tr>
                <th>Month</th>
                <th>Interest Paid</th>
                <th>Bank Fees Paid</th>
                <th>Principal Paid</th>
                <th>Accumulated Interest Paid</th>
                <th>Accumulated Bank Fees Paid</th>
                <th>Accumulated Principal Paid</th>
            </tr>
        </thead>
        <tbody>
            @foreach (PaymentInstallment detail in plan.Value.SelectMany(a => a.PaymentInstallments))
                {
                <tr>
                    <td>@detail.PaymentMonth</td>
                    <td>@detail.InterestPaid</td>
                    <td>@detail.BankFeesPaid</td>
                    <td>@detail.PrincipalPaid</td>
                    <td>@detail.AccumulatedInterestPaid</td>
                    <td>@detail.AccumulatedBankFeesPaid</td>
                    <td>@detail.AccumulatedPrincipalPaid</td>
                </tr>
                }
        </tbody>
    </table>
    }

@code {
    private DebtPayoffPlan DebtPayoffPlan { get; set; }

    protected override Task OnInitializedAsync()
        {
        string paymentPlanDetailsJson = NavigationManager.ToBaseRelativePath(NavigationManager.Uri).Split(new[] { '?' })[1].Split(new[] { '=' })[1];
        DebtPayoffPlan = JsonSerializer.Deserialize<DebtPayoffPlan>(Uri.UnescapeDataString(paymentPlanDetailsJson));
        return Task.CompletedTask;
        }
}
