@page "/loans"
@using DebtSnowballer.Client.Services
@using DebtSnowballer.Shared.DTOs
@inject ILoanService LoanService

<h3>Loans</h3>

@if (loans == null)
    {
    <p>
        <em>Loading...</em>
    </p>
    }
else
    {
    <table class="table">
        <thead>
            <tr>
                <th>Loan Nickname</th>
                <th>Principal</th>
                <th>Interest Rate</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var loan in loans)
                {
                <tr>
                    <td>@loan.LoanNickName</td>
                    <td>@loan.Principal</td>
                    <td>@loan.InterestRate</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => LoadLoan(loan.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteLoan(loan.Id)">Delete</button>
                    </td>
                </tr>
                }
        </tbody>
    </table>

    <button class="btn btn-success" @onclick="NewLoan">Add New Loan</button>

    <h3>@(selectedLoan == null ? "Add Loan" : "Edit Loan")</h3>

    @if (selectedLoan != null)
        {
        <EditForm Model="selectedLoan" OnValidSubmit="SaveLoan">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="LoanNickName">Loan Nickname:</label>
                <InputText id="LoanNickName" class="form-control" @bind-Value="selectedLoan.LoanNickName" />
            </div>

            <div class="form-group">
                <label for="Principal">Principal:</label>
                <InputNumber id="Principal" class="form-control" @bind-Value="selectedLoan.Principal" />
            </div>

            <div class="form-group">
                <label for="InterestRate">Interest Rate:</label>
                <InputNumber id="InterestRate" class="form-control" @bind-Value="selectedLoan.InterestRate" />
            </div>

            <div class="form-group">
                <label for="MinimumPayment">Minimum Payment:</label>
                <InputNumber id="MinimumPayment" class="form-control" @bind-Value="selectedLoan.MinimumPayment" />
            </div>

            <div class="form-group">
                <label for="ExtraPayment">Extra Payment:</label>
                <InputNumber id="ExtraPayment" class="form-control" @bind-Value="selectedLoan.ExtraPayment" />
            </div>

            <div class="form-group">
                <label for="TermInMonths">Term In Months:</label>
                <InputNumber id="TermInMonths" class="form-control" @bind-Value="selectedLoan.TermInMonths" />
            </div>

            <div class="form-group">
                <label for="LoanOrder">Loan Order:</label>
                <InputNumber id="LoanOrder" class="form-control" @bind-Value="selectedLoan.LoanOrder" />
            </div>

            <div class="form-group">
                <label for="LoanDate">Loan Date:</label>
                <InputDate id="LoanDate" class="form-control" @bind-Value="selectedLoan.LoanDate" />
            </div>

            <button type="submit" class="btn btn-success">@(selectedLoan.Id == 0 ? "Add" : "Update")</button>
        </EditForm>
        }
    }

@code {

    private List<LoanDto> loans;

    private LoanDto selectedLoan;

    protected override async Task OnInitializedAsync()
        {
        await LoadLoans();
        }

    private async Task LoadLoans()
        {
        loans = await LoanService.GetLoans();
        }

    private void NewLoan()
        {
        selectedLoan = new LoanDto();
        }

    private async Task LoadLoan(int id)
        {
        selectedLoan = await LoanService.GetLoan(id);
        }

    private async Task SaveLoan()
        {
        if (selectedLoan.Id == 0)
            {
            await LoanService.AddLoan(selectedLoan);
            }
        else
            {
            await LoanService.UpdateLoan(selectedLoan);
            }

        selectedLoan = null;

        await LoadLoans();
        }

    private async Task DeleteLoan(int id)
        {
        await LoanService.DeleteLoan(id);

        await LoadLoans();
        }

}
