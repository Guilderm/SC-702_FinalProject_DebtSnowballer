@using DebtSnowballer.Shared.DTOs
@using DebtSnowballer.Client.ClientSideServices
@using DebtSnowballer.Shared.Currency
@inject IDebtService DebtService

@inject ISnackbar Snackbar


<MudTable Items="@LoanDetails" CanCancelEdit="true">
	<HeaderContent>
		<MudTh>Loan Name</MudTh>
		<MudTh>Remaining Principal</MudTh>
		<MudTh>Interest Rate</MudTh>
		<MudTh>Bank Fees</MudTh>
		<MudTh>Monthly Payment</MudTh>
		<MudTh>Remaining Term (Months)</MudTh>
		<MudTh>Currency</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd DataLabel="Loan Name">@context.Name</MudTd>
		<MudTd DataLabel="Remaining Principal">@context.RemainingPrincipal</MudTd>
		<MudTd DataLabel="Interest Rate">@context.AnnualInterestRate</MudTd>
		<MudTd DataLabel="Bank Fees">@context.BankFees</MudTd>
		<MudTd DataLabel="Monthly Payment">@context.ContractedMonthlyPayment</MudTd>
		<MudTd DataLabel="Remaining Term">@context.RemainingTermInMonths</MudTd>
		<MudTd DataLabel="Currency">@context.CurrencyCode</MudTd>
	</RowTemplate>
	<RowEditingTemplate>
		<MudTd DataLabel="Loan Name"><MudTextField @bind-Value="@context.Name" Required /></MudTd>
		<MudTd DataLabel="Remaining Principal"><MudNumericField @bind-Value="@context.RemainingPrincipal" Required /></MudTd>
		<MudTd DataLabel="Interest Rate"><MudNumericField @bind-Value="@context.AnnualInterestRate" Required /></MudTd>
		<MudTd DataLabel="Bank Fees"><MudNumericField @bind-Value="@context.BankFees" Required /></MudTd>
		<MudTd DataLabel="Monthly Payment"><MudNumericField @bind-Value="@context.ContractedMonthlyPayment" Required /></MudTd>
		<MudTd DataLabel="Remaining Term"><MudNumericField @bind-Value="@context.RemainingTermInMonths" Required /></MudTd>
		<MudTd DataLabel="Currency">
			<MudSelect @bind-Value="@context.CurrencyCode" Label="Currency">
				@foreach (var currency in Currencies.SupportedCurrencies)
					{
					<MudSelectItem Value="@currency.AlphaCode">@currency.Name (@currency.AlphaCode)</MudSelectItem>
					}
			</MudSelect>
		</MudTd>
	</RowEditingTemplate>
</MudTable>






<table class="table">
	<thead>
	<tr>
		<th>Loan Nickname</th>
		<th>Principal</th>
		<th>BankFees</th>
		<th>Monthly Payment</th>
		<th>Interest Rate</th>
		<th>Remaining Term</th>
		<th>Cardinal Order</th>
		<th>Currency</th>
		<th>Start Date</th>
		@if (AreActionsShown)
		{
			<th>Actions</th>
		}
	</tr>
	</thead>
	<tbody>
	@foreach (LoanDetailDto debt in LoanDetails)
	{
		string currencySymbol = GetCurrencySymbol(debt.CurrencyCode);
		<tr>
			<td>@debt.Name</td>
			<td>@currencySymbol @debt.RemainingPrincipal.ToString("N2")</td>
			<td>@currencySymbol @debt.BankFees.ToString("N2")</td>
			<td>@currencySymbol @debt.ContractedMonthlyPayment.ToString("N2")</td>
			<td>@debt.AnnualInterestRate.ToString("P2")</td>
			<td>@debt.RemainingTermInMonths</td>
			<td>@debt.CardinalOrder</td>
			<td>@debt.CurrencyCode</td>
			<td>@debt.StartDate</td>
			@if (AreActionsShown)
			{
				<td>
					<button class="btn btn-primary" @onclick="() => EditDebt(debt.Id)">Edit</button>
					<button class="btn btn-danger" @onclick="() => DeleteDebt(debt.Id)">Delete</button>
				</td>
			}
		</tr>
	}
	</tbody>
</table>

@code {

	[Parameter]
	public bool AreActionsShown { get; set; }

	[Parameter]
	public List<LoanDetailDto> LoanDetails { get; set; }

	[Parameter]
	public Func<string, string> GetCurrencySymbol { get; set; }

	[Parameter]
	public EventCallback<int> OnEditDebt { get; set; }

	[Parameter]
	public EventCallback<int> OnDeleteDebt { get; set; }

	private List<decimal> _chartData;

	protected override void OnParametersSet()
	{
		_chartData = LoanDetails.Select(debt => debt.RemainingPrincipal).ToList();
	}


	private async Task EditDebt(int id)
	{
		await OnEditDebt.InvokeAsync(id);
	}

	private async Task DeleteDebt(int id)
	{
		await OnDeleteDebt.InvokeAsync(id);
	}

}