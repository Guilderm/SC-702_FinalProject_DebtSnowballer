@using DebtSnowballer.Shared.DTOs
@using DebtSnowballer.Client.ClientSideServices
@inject IDebtService DebtService

@inject ISnackbar Snackbar


<MudTable Items="@LoanDetails" Dense="true" SortLabel="Sort By" Hover="true" ReadOnly="@IsReadOnly">
	<HeaderContent>
		<MudTh>
			<MudTableSortLabel SortBy="new Func<LoanDetailDto, object>(x => x.Name)">Loan NickName</MudTableSortLabel>
		</MudTh>
		<MudTh>
			<MudTableSortLabel SortBy="new Func<LoanDetailDto, object>(x => x.RemainingPrincipal)">Remaining Principal</MudTableSortLabel>
		</MudTh>
		<MudTh>
			<MudTableSortLabel SortBy="new Func<LoanDetailDto, object>(x => x.AnnualInterestRate)">Interest Rate</MudTableSortLabel>
		</MudTh>
		<MudTh>
			<MudTableSortLabel SortBy="new Func<LoanDetailDto, object>(x => x.BankFees)">BankFees</MudTableSortLabel>
		</MudTh>
		<MudTh>
			<MudTableSortLabel SortBy="new Func<LoanDetailDto, object>(x => x.ContractedMonthlyPayment)">Monthly Payment</MudTableSortLabel>
		</MudTh>
		<MudTh>
			<MudTableSortLabel SortBy="new Func<LoanDetailDto, object>(x => x.RemainingTermInMonths)">Remaining Term</MudTableSortLabel>
		</MudTh>
		<MudTh>
			<MudTableSortLabel SortBy="new Func<LoanDetailDto, object>(x => x.CurrencyCode)">Currency</MudTableSortLabel>
		</MudTh>
		<MudTh>Start Date</MudTh>
		@if (!IsReadOnly)
		{
			<MudTh>Actions</MudTh>
		}

	</HeaderContent>
	<RowTemplate>
		@if (_loanInEditMode == context)
		{
			<MudTd DataLabel="Loan NickName">
				<MudTextField @bind-Value="@context.Name" Required/>
			</MudTd>
			<MudTd DataLabel="Remaining Principal">
				<MudNumericField @bind-Value="@context.RemainingPrincipal" Required/>
			</MudTd>
			<MudTd DataLabel="Interest Rate">
				<MudNumericField @bind-Value="@context.AnnualInterestRate" Required/>
			</MudTd>
			<MudTd DataLabel="BankFees">
				<MudNumericField @bind-Value="@context.BankFees" Required/>
			</MudTd>
			<MudTd DataLabel="Monthly Payment">
				<MudNumericField @bind-Value="@context.ContractedMonthlyPayment" Required/>
			</MudTd>
			<MudTd DataLabel="Remaining Term">
				<MudNumericField @bind-Value="@context.RemainingTermInMonths" Required/>
			</MudTd>
			<MudTd DataLabel="Currency">
				<MudTextField @bind-Value="@context.CurrencyCode" Required/>
			</MudTd>
			<MudTd>
				<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Save" Class="pa-0" OnClick="() => OnSave(context.Id)"/>
				<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Cancel" Class="pa-0" OnClick="CancelEdit"/>
			</MudTd>
		}
		else
		{
			<MudTd DataLabel="Loan NickName">@context.Name</MudTd>
			<MudTd DataLabel="Remaining Principal">@GetCurrencySymbol(context.CurrencyCode) @context.RemainingPrincipal.ToString("N2")</MudTd>
			<MudTd DataLabel="Interest Rate">@context.AnnualInterestRate.ToString("P2")</MudTd>
			<MudTd DataLabel="BankFees">@GetCurrencySymbol(context.CurrencyCode) @context.BankFees.ToString("N2")</MudTd>
			<MudTd DataLabel="Monthly Payment">@GetCurrencySymbol(context.CurrencyCode) @context.ContractedMonthlyPayment.ToString("N2")</MudTd>
			<MudTd DataLabel="Remaining Term">@context.RemainingTermInMonths</MudTd>
			<MudTd DataLabel="Currency">@context.CurrencyCode</MudTd>
			<MudTd DataLabel="Start Date">@context.StartDate.ToString("yyyy-MM")</MudTd>
			@if (!IsReadOnly)
			{
				<MudTd>
					<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="() => EditLoan(context.Id)"/>
					<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Class="pa-0" OnClick="() => DeleteLoan(context.Id)"/>
				</MudTd>
			}
		}
	</RowTemplate>
	<FooterContent>
		<MudButton OnClick="AddLoan" Variant="Variant.Filled" Color="Color.Primary">Add Loan</MudButton>
	</FooterContent>
</MudTable>


@code {
	private LoanDetailDto _loanInEditMode;

	[Parameter]
	public bool IsReadOnly { get; set; }

	[Parameter]
	public List<LoanDetailDto> LoanDetails { get; set; }

	[Parameter]
	public Func<string, string> GetCurrencySymbol { get; set; }

	[Parameter]
	public Func<Task> LoadDebtsInQuoteCurrency { get; set; }

	[Parameter]
	public Func<Task> CalculateData { get; set; }


	private void CancelEdit()
	{
		_loanInEditMode = null;
	}

	private void EditLoan(int loanId)
	{
		LoanDetailDto Loan = GetLoanFromCashe(loanId);
		if (Loan == null)
		{
			CancelEdit();
		}
		if (Loan != null)
		{
			EnterEditMode(Loan);
		}
	}

	private LoanDetailDto GetLoanFromCashe(int loanId)
	{
		LoanDetailDto loanToEdit = LoanDetails.FirstOrDefault(loan => loan.Id == loanId);
		return loanToEdit;
	}

	private void AddLoan()
	{
		LoanDetailDto newLoan = new()
		{
			Name = "Visa Credit Card",
			RemainingPrincipal = 5000.00m,
			BankFees = 25.00m,
			ContractedMonthlyPayment = 150.00m,
			AnnualInterestRate = 0.1799m,
			RemainingTermInMonths = 24,
			CurrencyCode = "USD", CardinalOrder = 1,
			StartDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1)
		};
		LoanDetails.Add(newLoan);
		EnterEditMode(newLoan);
	}

	private void EnterEditMode(LoanDetailDto loan)
	{
		_loanInEditMode = loan;
		StateHasChanged();
	}


	private async Task OnSave(int loanId)
	{
		try
		{
			if (_loanInEditMode == null)
			{
				Snackbar.Add("No loan selected for saving.", Severity.Error);
				return;
			}

			if (_loanInEditMode.Id != loanId)
			{
				Snackbar.Add($"Internal error saving loan {_loanInEditMode.Name}.", Severity.Error);
				return;
			}

			if (_loanInEditMode.Id == 0)
			{
				await DebtService.AddDebt(_loanInEditMode);
				Snackbar.Add($"Loan whit name {_loanInEditMode.Name} was added successfully.", Severity.Success);
			}
			else
			{
				await DebtService.UpdateDebt(_loanInEditMode);
				Snackbar.Add($"Loan whit name {_loanInEditMode.Name} was updated successfully.", Severity.Success);
			}

	// Refresh the data and exit edit mode
			LoanDetails.Add(_loanInEditMode);
			await RefreshPage();
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Error saving loan: {ex.Message}", Severity.Error);
		}
	}

	private async Task DeleteLoan(int loanId)
	{
		try
		{
			var loan = GetLoanFromCashe(loanId);

			await DebtService.DeleteLoan(loan.Id);
			LoanDetails.Remove(loan);

			await RefreshPage();

	// Success message
			Snackbar.Add($"Loan whit name {loan.Name} was deleted successfully.", Severity.Success);
		}
		catch (Exception ex)
		{
	// Error message
			Snackbar.Add($"Error deleting debt with ID {loanId}: {ex.Message}", Severity.Error);
		}
	}

	private async Task RefreshPage()
	{
		_loanInEditMode = null;
		StateHasChanged();
		await LoadDebtsInQuoteCurrency();
		await CalculateData();
	}

}