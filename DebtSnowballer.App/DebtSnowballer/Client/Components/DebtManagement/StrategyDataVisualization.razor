@using DebtSnowballer.Client.ClientSideServices.SolvencyEngine
@using DebtSnowballer.Shared.DTOs
@inject ISolvencyPlanner SolvencyPlanner
@inject NavigationManager NavigationManager



@if (Series != null && XAxisLabels != null)
{
	<MudText Typo="Typo.h4">Amortization Schedule</MudText>
	<div>
		<MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels.ToArray()"></MudChart>
		<MudText Typo="Typo.h6">Interest Paid Over Time</MudText>
	</div>
}


@if (SolvencyPlan != null)
{
	string currencySymbol = GetCurrencySymbol(UserPreference.BaseCurrency)
		;
	<MudText Typo="Typo.h4">Amortization Schedule</MudText>
	<MudTable Items="@TableRows">
		<HeaderContent>
			<MudTh>Date</MudTh>
			<MudTh>Snowball Interest Paid</MudTh>
			<MudTh>Avalanche Interest Paid</MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd>@context.Date.ToString("yyyy-MM")</MudTd>
			<MudTd>@currencySymbol @context.Snowball.ToString("N2")</MudTd>
			<MudTd>@currencySymbol @context.Avalanche.ToString("N2")</MudTd>
		</RowTemplate>
	</MudTable>
}

@if (Series != null && XAxisLabels != null)
{
	<MudText Typo="Typo.h4">Amortization Schedule</MudText>
	<div>
		<MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels.ToArray()"></MudChart>
		<MudText Typo="Typo.h6">Interest Paid Over Time</MudText>
	</div>
}


@if (SolvencyPlan != null)
{
	foreach (KeyValuePair<string, List<LoanAmortization>> plan in SolvencyPlan.PaymentPlans)
	{
		string currencySymbol = GetCurrencySymbol(UserPreference.BaseCurrency)
			;
		<MudDivider/>
		<MudDivider/>
		<MudText Typo="Typo.h4">Strategy Name: @plan.Key</MudText>
		<MudText Typo="Typo.h5">Loan Details</MudText>

		foreach (LoanAmortization schedule in plan.Value)
		{
			<MudText Typo="Typo.h5">
				<br>@schedule.Name
			</MudText>
			<MudText>Loans Currency: @schedule.CurrencyCode</MudText>
			<MudText>Annual Interest Rate: @schedule.AnnualInterestRate.ToString("P2")</MudText>
			<MudText>Bank Fees: @currencySymbol @schedule.BankFees.ToString("N2")</MudText>
			<MudText>Contracted Monthly Payment: @currencySymbol @schedule.ContractedMonthlyPayment.ToString("N2")</MudText>
			<br>
			<MudText>Total Interest Paid: @currencySymbol @schedule.TotalInterestPaid.ToString("N2")</MudText>
			<MudText>Total Bank Fees Paid: @currencySymbol @schedule.TotalBankFeesPaid.ToString("N2")</MudText>
			<MudText>Total Principal Paid: @currencySymbol @schedule.TotalPrincipalPaid.ToString("N2")</MudText>
			<MudText>Total ExtraPayment Paid: @currencySymbol @schedule.TotalExtraPayment.ToString("N2")</MudText>
			<br>

			<MudTable Items="schedule.Schedule">
				<HeaderContent>
					<MudTh>Loan</MudTh>
					<MudTh>Month</MudTh>
					<MudTh>Date</MudTh>
					<MudTh>Interest Paid</MudTh>
					<MudTh>Bank Fees Paid</MudTh>
					<MudTh>Principal Paid</MudTh>
					<MudTh>Accumulated Interest Paid</MudTh>
					<MudTh>Accumulated Bank Fees Paid</MudTh>
					<MudTh>Accumulated Principal Paid</MudTh>
					<MudTh>Accumulated Extra Payment</MudTh>
					<MudTh>Unallocated Payment</MudTh>
					<MudTh>Extra Payment</MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd>@context.Name</MudTd>
					<MudTd>@context.Month</MudTd>
					<MudTd>@context.Date.ToString("yyyy-MM")</MudTd>
					<MudTd>@currencySymbol @context.InterestPaid.ToString("N2")</MudTd>
					<MudTd>@currencySymbol @context.BankFeesPaid.ToString("N2")</MudTd>
					<MudTd>@currencySymbol @context.PrincipalPaid.ToString("N2")</MudTd>
					<MudTd>@currencySymbol @context.TotalInterestPaid.ToString("N2")</MudTd>
					<MudTd>@currencySymbol @context.TotalBankFeesPaid.ToString("N2")</MudTd>
					<MudTd>@currencySymbol @context.TotalPrincipalPaid.ToString("N2")</MudTd>
					<MudTd>@currencySymbol @context.TotalExtraPayment.ToString("N2")</MudTd>
					<MudTd>@currencySymbol @context.UnallocatedPayment.ToString("N2")</MudTd>
				</RowTemplate>
			</MudTable>
		}
	}
}


<MudButton OnClick="CalculateDebtPayoffPlan" Variant="Variant.Filled" Color="Color.Primary">Calculate DebtPayoff Plan</MudButton>


@code {

	private class DataRow
	{
		public DateTime Date { get; set; }
		public decimal Snowball { get; set; }
		public decimal Avalanche { get; set; }
	}


	private List<DataRow> TableRows { get; set; } = new();

	private SolvencyPlan SolvencyPlan { get; set; }

	public List<ChartSeries> Series { get; set; }
	public List<string> XAxisLabels { get; set; }

	[Parameter]
	public UserPreferenceDto UserPreference { get; set; }

	[Parameter]
	public Func<string, string> GetCurrencySymbol { get; set; }

	[Parameter]
	public List<LoanDto> DebtsInBaseCurrency { get; set; }

	[Parameter]
	public List<SnowflakeDto> SnowflakesInBaseCurrency { get; set; }

	[Parameter]
	public Func<Task> CalculateData { get; set; }


	private async Task CalculateDebtPayoffPlan()
	{
		Console.WriteLine("calling CalculateData()");
		await CalculateData();
		Console.WriteLine("calling CreateDebtPayoffPlan()");
		await CreateDebtPayoffPlan();
		PopulateTableRows(); // Only one call needed
		Console.WriteLine("calling PopulateChartData()");
		PopulateChartData();

		StateHasChanged();
	}

	private void PopulateTableRows()
	{
	// Clear the existing table rows
		TableRows.Clear();

	// Find the length of the longest schedule
		int maxScheduleLength = SolvencyPlan.PaymentPlans.Values
			.SelectMany(plans => plans)
			.Max(amortization => amortization.Schedule.Count);

	// Initialize the interest sums for Snowball and Avalanche for each month
		List<decimal> snowballInterestSums = new List<decimal>(new decimal[maxScheduleLength]);
		List<decimal> avalancheInterestSums = new List<decimal>(new decimal[maxScheduleLength]);
		List<DateTime> yearMonth = new List<DateTime>(new DateTime[maxScheduleLength]);


	// Iterate through each plan, loan amortization, and schedule entry
		foreach (var plan in SolvencyPlan.PaymentPlans)
		{
			foreach (var amortization in plan.Value)
			{
				for (int month = 0; month < amortization.Schedule.Count; month++)
				{
	// Add the total interest paid to the corresponding month's sum
					if (plan.Key == "Snowball")
					{
						snowballInterestSums[month] += amortization.Schedule[month].TotalInterestPaid;
					}
					else if (plan.Key == "Avalanche")
					{
						avalancheInterestSums[month] += amortization.Schedule[month].TotalInterestPaid;
					}
					yearMonth[month] = amortization.Schedule[month].Date;
				}
			}
		}

	// Populate the table rows with the new data
		for (int month = 0; month < maxScheduleLength; month++)
		{
			TableRows.Add(new DataRow
			{
				Date = yearMonth[month],
				Snowball = snowballInterestSums[month],
				Avalanche = avalancheInterestSums[month]
			});
		}
	}


	private void PopulateChartData()
	{
		Series = new List<ChartSeries>();
		XAxisLabels = new List<string>();

		List<double> snowballData = new List<double>();
		List<double> avalancheData = new List<double>();

		foreach (DataRow row in TableRows)
		{
			snowballData.Add((double)row.Snowball);
			avalancheData.Add((double)row.Avalanche);
			XAxisLabels.Add(row.Date.ToString("MM-yyyy"));
		}

		Series.Add(new ChartSeries { Name = "Snowball", Data = snowballData.ToArray() });
		Series.Add(new ChartSeries { Name = "Avalanche", Data = avalancheData.ToArray() });
	}


	private async Task CreateDebtPayoffPlan()
	{
		Console.WriteLine("Starting to create debt payoff plan...");

		if (DebtsInBaseCurrency is {Count: > 0 } && SolvencyPlanner != null)
		{
			Console.WriteLine("Calling Solvency Planner");
			SolvencyPlan = await SolvencyPlanner.CalculatePaymentPlansAsync(DebtsInBaseCurrency, SnowflakesInBaseCurrency, UserPreference.DebtPlanMonthlyPayment);
			Console.WriteLine("Debt payoff plan created successfully.");
			StateHasChanged();
			Console.WriteLine("State has changed after creating debt payoff plan.");
		}
		else
		{
			Console.WriteLine("No debts available. Debt payoff plan creation skipped.");
		}
	}

}