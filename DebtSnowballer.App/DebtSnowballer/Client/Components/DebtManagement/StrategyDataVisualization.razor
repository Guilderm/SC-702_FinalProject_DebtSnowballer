@using DebtSnowballer.Client.ClientSideServices.SolvencyEngine
@using DebtSnowballer.Shared.DTOs
@inject ISolvencyPlanner SolvencyPlanner
@inject NavigationManager NavigationManager



@if (SolvencyPlan != null)
{
	<MudTable Items="@TableRows">
		<HeaderContent>
			<MudTh>Date</MudTh>
			<MudTh>Snowball Interest Paid</MudTh>
			<MudTh>Avalanche Interest Paid</MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd>@context.Date</MudTd>
			<MudTd>@context.SnowballInterestPaid</MudTd>
			<MudTd>@context.AvalancheInterestPaid</MudTd>
		</RowTemplate>
	</MudTable>
}

@if (Series != null && XAxisLabels != null)
{
	<MudText Typo="Typo.h4">Amortization Schedule</MudText>
	<div>
		<MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels.ToArray()"></MudChart>
		<MudText Typo="Typo.h6">Interest Paid Over Time</MudText>
	</div>
}


@if (SolvencyPlan != null)
	{
	foreach (KeyValuePair<string, List<LoanAmortization>> plan in SolvencyPlan.PaymentPlans)
		{
		string currencySymbol = "$";
		<MudDivider />
			<MudDivider />
		<MudText Typo="Typo.h4">Strategy Name: @plan.Key</MudText>
		<MudText Typo="Typo.h5">Loan Details</MudText>

		foreach (LoanAmortization schedule in plan.Value)
			{
			<MudText Typo="Typo.h5">
				<br>@schedule.Name
			</MudText>
			<MudText>Loans Currency: @schedule.CurrencyCode</MudText>
			<MudText>Annual Interest Rate: @schedule.AnnualInterestRate.ToString("P2")</MudText>
			<MudText>Bank Fees: @currencySymbol @schedule.BankFees.ToString("N2")</MudText>
			<MudText>Contracted Monthly Payment: @currencySymbol @schedule.ContractedMonthlyPayment.ToString("N2")</MudText>
			<br>
			<MudText>Total Interest Paid: @currencySymbol @schedule.TotalInterestPaid.ToString("N2")</MudText>
			<MudText>Total Bank Fees Paid: @currencySymbol @schedule.TotalBankFeesPaid.ToString("N2")</MudText>
			<MudText>Total Principal Paid: @currencySymbol @schedule.TotalPrincipalPaid.ToString("N2")</MudText>
			<MudText>Total ExtraPayment Paid: @currencySymbol @schedule.TotalExtraPayment.ToString("N2")</MudText>
			<br>

			<MudTable Items="schedule.Schedule">
				<HeaderContent>
					<MudTh>Loan</MudTh>
					<MudTh>Month</MudTh>
					<MudTh>Date</MudTh>
					<MudTh>Interest Paid</MudTh>
					<MudTh>Bank Fees Paid</MudTh>
					<MudTh>Principal Paid</MudTh>
					<MudTh>Accumulated Interest Paid</MudTh>
					<MudTh>Accumulated Bank Fees Paid</MudTh>
					<MudTh>Accumulated Principal Paid</MudTh>
					<MudTh>Accumulated Extra Payment</MudTh>
					<MudTh>Unallocated Payment</MudTh>
					<MudTh>Extra Payment</MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd>@context.Name</MudTd>
					<MudTd>@context.Month</MudTd>
					<MudTd>@context.Date.ToString("yyyy-MM")</MudTd>
					<MudTd>@currencySymbol @context.InterestPaid.ToString("N2")</MudTd>
					<MudTd>@currencySymbol @context.BankFeesPaid.ToString("N2")</MudTd>
					<MudTd>@currencySymbol @context.PrincipalPaid.ToString("N2")</MudTd>
					<MudTd>@currencySymbol @context.TotalInterestPaid.ToString("N2")</MudTd>
					<MudTd>@currencySymbol @context.TotalBankFeesPaid.ToString("N2")</MudTd>
					<MudTd>@currencySymbol @context.TotalPrincipalPaid.ToString("N2")</MudTd>
					<MudTd>@currencySymbol @context.TotalExtraPayment.ToString("N2")</MudTd>
					<MudTd>@currencySymbol @context.UnallocatedPayment.ToString("N2")</MudTd>
				</RowTemplate>
			</MudTable>
			}
		}
	}



<MudButton OnClick="CalculateDebtPayoffPlan" Variant="Variant.Filled" Color="Color.Primary">Calculate DebtPayoff Plan</MudButton>


@code {
	private class DataRow
		{
		public string Date { get; set; }
		public string Snowball { get; set; }
		public string Avalanche { get; set; }
		}

	private List<DataRow> TableRows { get; set; } = new();

	private SolvencyPlan SolvencyPlan { get; set; }

	public List<ChartSeries> Series { get; set; }
	public List<string> XAxisLabels { get; set; }

	[Parameter]
	public UserPreferenceDto UserPreference { get; set; }

	[Parameter]
	public Func<string, string> GetCurrencySymbol { get; set; }

	[Parameter]
	public List<LoanDto> DebtsInBaseCurrency { get; set; }

	[Parameter]
	public List<SnowflakeDto> SnowflakesInBaseCurrency { get; set; }

	[Parameter]
	public Func<Task> CalculateData { get; set; }


	private async Task CalculateDebtPayoffPlan()
	{
		Console.WriteLine("calling CalculateData()");
		await CalculateData();
		Console.WriteLine("calling CreateDebtPayoffPlan()");
		await CreateDebtPayoffPlan();
		Console.WriteLine("calling PopulateChartData()");
	//PopulateChartData();

		PopulateDataRow();

		StateHasChanged();
	}

	private void PopulateDataRow()
	{
		for (int i = 0; i < SolvencyPlan.PaymentPlans["Snowball"].Count; i++)
		{
			for (int j = 0; j < SolvencyPlan.PaymentPlans["Snowball"][i].Schedule.Count; j++)
			{
				TableRows.Add(new DataRow
				{
					Date = SolvencyPlan.PaymentPlans["Snowball"][i].Schedule[j].Date.ToString("MM-yyyy"),
					Snowball = SolvencyPlan.PaymentPlans["Snowball"][i].Schedule[j].TotalInterestPaid.ToString("N2"),
					Avalanche = SolvencyPlan.PaymentPlans["Avalanche"][i].Schedule[j].TotalInterestPaid.ToString("N2")
				});
			}
		}
	}

	private void PopulateChartData()
	{
		Series = new List<ChartSeries>();
		XAxisLabels = new List<string>();

	// Iterate through the payment plans
		foreach (KeyValuePair<string, List<LoanAmortization>> plan in SolvencyPlan.PaymentPlans)
		{
			List<double> interestPaidData = new List<double>();

	// Iterate through the amortization schedules and collect interest paid data
			foreach (LoanAmortization schedule in plan.Value)
			{
				foreach (PaymentInstallment detail in schedule.Schedule)
				{
					interestPaidData.Add((double)detail.InterestPaid);
					XAxisLabels.Add(detail.Date.ToString("MM-yyyy"));
				}
			}

	// Add the interest paid data to the series
			Series.Add(new ChartSeries { Name = plan.Key, Data = interestPaidData.ToArray() });
		}
	}


	private async Task CreateDebtPayoffPlan()
	{
		Console.WriteLine("Starting to create debt payoff plan...");

		Console.WriteLine($"SolvencyPlanner is {(SolvencyPlanner == null ? "null" : "not null")}");
		Console.WriteLine($"DebtsInBaseCurrency is {(DebtsInBaseCurrency == null ? "null" : $"not null, Count: {DebtsInBaseCurrency.Count}")}");
		Console.WriteLine($"UserPreference is {(UserPreference == null ? "null" : $"not null, it is {UserPreference.DebtPlanMonthlyPayment}")}");
		Console.WriteLine($"CalculateData is {(CalculateData == null ? "null" : "not null")}");
		Console.WriteLine($"GetCurrencySymbol is {(GetCurrencySymbol == null ? "null" : $"not null, it is {GetCurrencySymbol}")}");
		Console.WriteLine($"SnowflakesInBaseCurrency is {(SnowflakesInBaseCurrency == null ? "null" : $"not null, Count: {SnowflakesInBaseCurrency.Count}")}");

		if (DebtsInBaseCurrency is {Count: > 0 } && SolvencyPlanner != null)
		{
			Console.WriteLine("Calling Solvency Planner");
			SolvencyPlan = await SolvencyPlanner.CalculatePaymentPlansAsync(DebtsInBaseCurrency, SnowflakesInBaseCurrency, UserPreference.DebtPlanMonthlyPayment);
			Console.WriteLine("Debt payoff plan created successfully.");
			StateHasChanged();
			Console.WriteLine("State has changed after creating debt payoff plan.");
		}
		else
		{
			Console.WriteLine("No debts available. Debt payoff plan creation skipped.");
		}
	}


	}