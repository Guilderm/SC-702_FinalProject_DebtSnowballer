@using DebtSnowballer.Shared.DTOs
@using DebtSnowballer.Shared.Currency
@using DebtSnowballer.Client.Services
@inject IUserProfileService UserProfileService
<br>
<br>

@if (DebtsInBaseCurrency != null)
{
	<div class="summary">
		<p>Total Amount Owed in Base Currency: <strong>@GetCurrencySymbol(BaseCurrencyCode) @TotalAmountOwed.ToString("N2")</strong></p>
		<p>Total Monthly Payment in Base Currency: <strong>@GetCurrencySymbol(BaseCurrencyCode) @ContractedMonthlyPayment.ToString("N2")</strong></p>
		<p>Preferred Monthly Payment in Base Currency: <strong>@GetCurrencySymbol(BaseCurrencyCode) @PreferredMonthlyPayment.ToString("N2")</strong></p>
		<input @bind="PreferredMonthlyPayment" type="number" min="@ContractedMonthlyPayment" step="0.01" />
		<button @onclick="UpdatePreferredMonthlyPayment">Update Preferred Monthly Payment</button>
	</div>
	}

@code {
	private decimal TotalAmountOwed => DebtsInBaseCurrency.Sum(debt => debt.RemainingPrincipal);
	private decimal ContractedMonthlyPayment => DebtsInBaseCurrency.Sum(debt => debt.MonthlyPayment);
	private decimal PreferredMonthlyPayment { get; set; }

	[Parameter]
	public List<DebtDto> DebtsInBaseCurrency { get; set; }

	[Parameter]
	public string BaseCurrencyCode { get; set; }

	[Parameter]
	public Func<string, string> GetCurrencySymbol { get; set; }

	private async Task UpdatePreferredMonthlyPayment()
	{
		if (PreferredMonthlyPayment < ContractedMonthlyPayment)
		{
			Console.WriteLine($"ERROR: PreferredMonthlyPayment: {PreferredMonthlyPayment} is less than ContractedMonthlyPayment: {ContractedMonthlyPayment}");
		}
		else
		{
			Console.WriteLine($"Info: will update PreferredMonthlyPayment to: {PreferredMonthlyPayment}");
			await UserProfileService.UpdatePreferredMonthlyPayment(PreferredMonthlyPayment);
		}
	}
}