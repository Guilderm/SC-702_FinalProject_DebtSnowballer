@using DebtSnowballer.Shared.DTOs
@using DebtSnowballer.Client.ClientSideServices
@using System.ComponentModel.DataAnnotations
@inject IDebtService DebtService

@inject ISnackbar Snackbar
@inject IDialogService DialogService

@inject ILogger<DebtTable> Logger


<MudTable Items="@LoanDetails" Dense="true" SortLabel="Sort By" Hover="true" ReadOnly="@IsReadOnly">
	<HeaderContent>
		<MudTh>
			<MudTableSortLabel SortBy="new Func<LoanDto, object>(x => x.Name)">Loan NickName</MudTableSortLabel>
		</MudTh>
		<MudTh>
			<MudTableSortLabel SortBy="new Func<LoanDto, object>(x => x.RemainingPrincipal)">Remaining Principal</MudTableSortLabel>
		</MudTh>
		<MudTh>
			<MudTableSortLabel SortBy="new Func<LoanDto, object>(x => x.AnnualInterestRate)">Interest Rate</MudTableSortLabel>
		</MudTh>
		<MudTh>
			<MudTableSortLabel SortBy="new Func<LoanDto, object>(x => x.BankFees)">BankFees</MudTableSortLabel>
		</MudTh>
		<MudTh>
			<MudTableSortLabel SortBy="new Func<LoanDto, object>(x => x.ContractedMonthlyPayment)">Monthly Payment</MudTableSortLabel>
		</MudTh>
		<MudTh>
			<MudTableSortLabel SortBy="new Func<LoanDto, object>(x => x.RemainingTermInMonths)">Remaining Term</MudTableSortLabel>
		</MudTh>
		<MudTh>
			<MudTableSortLabel SortBy="new Func<LoanDto, object>(x => x.CurrencyCode)">Currency</MudTableSortLabel>
		</MudTh>
		@*<MudTh><MudTableSortLabel SortBy="new Func<LoanDto, object>(x => x.CardinalOrder)">Cardinal Order</MudTableSortLabel></MudTh>*@
		<MudTh>Start Date</MudTh>
		@if (!IsReadOnly)
		{
			<MudTh>Actions</MudTh>
		}

	</HeaderContent>
	<RowTemplate>
		@if (_loanInEditMode == context)
		{
			<MudTd DataLabel="Loan NickName">
				<MudTextField @bind-Value="@context.Name" Required For="@(() => context.Name)"/>
			</MudTd>
			<MudTd DataLabel="Remaining Principal">
				<MudNumericField @bind-Value="@context.RemainingPrincipal" Required For="@(() => context.RemainingPrincipal)"/>
			</MudTd>
			<MudTd DataLabel="Interest Rate">
				<MudNumericField @bind-Value="@context.AnnualInterestRate" ConverterBack="new Func<decimal, decimal>(v => v / 100)" Required For="@(() => context.AnnualInterestRate)"/>
			</MudTd>
			<MudTd DataLabel="BankFees">
				<MudNumericField @bind-Value="@context.BankFees" Required For="@(() => context.BankFees)"/>
			</MudTd>
			<MudTd DataLabel="Monthly Payment">
				<MudNumericField @bind-Value="@context.ContractedMonthlyPayment" Required For="@(() => context.ContractedMonthlyPayment)"/>
			</MudTd>
			<MudTd DataLabel="Remaining Term">
				<MudNumericField @bind-Value="@context.RemainingTermInMonths" Required For="@(() => context.RemainingTermInMonths)"/>
			</MudTd>
			<MudTd DataLabel="Currency">
				<MudTextField @bind-Value="@context.CurrencyCode" Required For="@(() => context.CurrencyCode)"/>
			</MudTd>
			<MudTd DataLabel="Start Date">
				<MudTextField @bind-Value="@context.StartDate" Required For="@(() => context.StartDate)"/>
			</MudTd>
			<MudTd>
				<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Save" Class="pa-0" OnClick="() => OnSave(context.Id)"/>
				<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Cancel" Class="pa-0" OnClick="CancelEdit"/>
			</MudTd>
		}
		else
		{
			SetCurrencySymbol(context.CurrencyCode);
			<MudTd DataLabel="Loan NickName">@context.Name</MudTd>
			<MudTd DataLabel="Remaining Principal">@_currencySymbol @context.RemainingPrincipal.ToString("N2")</MudTd>
			<MudTd DataLabel="Interest Rate">@context.AnnualInterestRate.ToString("P2")</MudTd>
			<MudTd DataLabel="BankFees">@_currencySymbol @context.BankFees.ToString("N2")</MudTd>
			<MudTd DataLabel="Monthly Payment">@_currencySymbol @context.ContractedMonthlyPayment.ToString("N2")</MudTd>
			<MudTd DataLabel="Remaining Term">@context.RemainingTermInMonths</MudTd>
			<MudTd DataLabel="Currency">@context.CurrencyCode</MudTd>
			<MudTd DataLabel="Start Date">@context.StartDate.ToString("yyyy-MM")</MudTd>

			@if (!IsReadOnly)
			{
				<MudTd>
					<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="() => EditLoan(context.Id)"/>
					<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" Class="pa-0" OnClick="() => OnDelete(context.Id)"/>
				</MudTd>
			}
		}
	</RowTemplate>
	<FooterContent>

	</FooterContent>
</MudTable>
@if (!IsReadOnly)
{
	<MudButton OnClick="AddLoan" Variant="Variant.Filled" Color="Color.Primary">Add Loan</MudButton>
}

@code {
	private LoanDto _loanInEditMode;
	private string _currencySymbol;

	[Parameter]
	public bool IsReadOnly { get; set; }

	[Parameter]
	public List<LoanDto> LoanDetails { get; set; }

	[Parameter]
	public Func<string, string> GetCurrencySymbol { get; set; }

	[Parameter]
	public Func<Task> LoadDebtsInQuoteCurrency { get; set; }

	[Parameter]
	public Func<Task> CalculateData { get; set; }


	private void SetCurrencySymbol(string symbol)
	{
		_currencySymbol = GetCurrencySymbol(symbol);
	}


	private void CancelEdit()
	{
		_loanInEditMode = null;
		Logger.LogInformation("Edit mode canceled.");
	}

	private void EditLoan(int loanId)
	{
		Logger.LogInformation($"Editing loan with ID {loanId}");
		LoanDto loan = GetLoanFromCashe(loanId);
		if (loan == null)
		{
			CancelEdit();
		}
		if (loan != null)
		{
			EnterEditMode(loan);
		}
	}

	private LoanDto GetLoanFromCashe(int loanId)
	{
		LoanDto loan = LoanDetails.FirstOrDefault(loan => loan.Id == loanId);
		Logger.LogInformation($"Fetched loan from cache with ID: {loan!.Id} Name: {loan!.Name}");
		return loan;
	}

	private void AddLoan()
	{
		Logger.LogInformation("Adding new loan.");
		LoanDto newLoan = new()
		{
			Name = "Visa Credit Card",
			RemainingPrincipal = 5000.00m,
			BankFees = 25.00m,
			ContractedMonthlyPayment = 150.00m,
			AnnualInterestRate = 0.1799m,
			RemainingTermInMonths = 24,
			CurrencyCode = "USD", CardinalOrder = 1,
			StartDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).AddMonths(1)
		};
		LoanDetails.Add(newLoan);
		EnterEditMode(newLoan);
	}

	private void EnterEditMode(LoanDto loan)
	{
		_loanInEditMode = loan;
		StateHasChanged();
		Logger.LogInformation($"Entered edit mode for loan with ID: {loan!.Id} Name: {loan!.Name}");
	}

	private async Task OnSave(int loanId)
	{
		Logger.LogInformation($"Attempting to save loan with ID {loanId}");

		if (_loanInEditMode == null)
		{
			Snackbar.Add("No loan selected for saving.", Severity.Error);
			return;
		}

		if (_loanInEditMode.Id != loanId)
		{
			Snackbar.Add($"Internal error saving loan {_loanInEditMode.Name}.", Severity.Error);
			return;
		}

		ValidationContext validationContext = new(_loanInEditMode, null, null);

		List<ValidationResult> validationResults = new();

		bool isValid = Validator.TryValidateObject(_loanInEditMode, validationContext, validationResults, true);

		if (!isValid)
		{
			foreach (ValidationResult validationResult in validationResults)
			{
				Logger.LogError($"Validation error: {validationResult.ErrorMessage}");
				Snackbar.Add($"Validation error: {validationResult.ErrorMessage}", Severity.Error);
			}
			return;
		}

		try
		{
			if (_loanInEditMode.Id == 0)
			{
				await DebtService.CreateLoan(_loanInEditMode);
				Snackbar.Add($"Loan with name {_loanInEditMode.Name} was added successfully.", Severity.Success);
				Logger.LogInformation($"Loan with name {_loanInEditMode.Name} was added successfully.");
			}
			else
			{
				await DebtService.UpdateLoan(_loanInEditMode);
				Snackbar.Add($"Loan with name {_loanInEditMode.Name} was updated successfully.", Severity.Success);
				Logger.LogInformation($"Loan with name {_loanInEditMode.Name} was updated successfully.");
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Error saving loan: {ex.Message}", Severity.Error);
			Logger.LogError(ex, $"Error saving loan with ID {_loanInEditMode.Id} and name {_loanInEditMode.Name}. Full exception details: {ex}");
			return;
		}


		LoanDetails.Add(_loanInEditMode);
		await RefreshPage();
	}

	private async Task OnDelete(int loanId)
	{
		Logger.LogInformation($"Attempting to delete loan with ID {loanId}");
		DialogParameters parameters = new DialogParameters();
		parameters.Add("ContentText", "Are you sure you want to delete this loan?");
		parameters.Add("ButtonText", "Delete");
		parameters.Add("Color", Color.Error);

		IDialogReference dialog = DialogService.Show<Dialog>("Delete Confirmation", parameters);
		DialogResult result = await dialog.Result;

		if (!result.Canceled)
		{
			try
			{
				LoanDto loan = GetLoanFromCashe(loanId);
				await DebtService.DeleteLoan(loan.Id);
				LoanDetails.Remove(loan);
				await RefreshPage();
				Snackbar.Add($"Loan with name {loan.Name} was deleted successfully.", Severity.Success);
				Logger.LogInformation($"Successfully deleted loan with ID {loanId}");
			}
			catch (Exception ex)
			{
				Snackbar.Add($"Error deleting debt with ID {loanId}: {ex.Message}", Severity.Error);
				Logger.LogError(ex, $"Error deleting loan with ID {loanId}");
			}
		}
	}


	private async Task RefreshPage()
	{
		_loanInEditMode = null;
		StateHasChanged();
		await LoadDebtsInQuoteCurrency();
		await CalculateData();
	}

}