@using DebtSnowballer.Shared.DTOs
@using DebtSnowballer.Client.ClientSideServices
@using DebtSnowballer.Shared.Currency
@inject ILogger<DebtTable> Logger

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IMultiPurposeService MultiPurposeService


@if (_strategyTypes == null)
{
	<p>
		<em>Loading strategies...</em>
		<MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Value="75" Class="my-7"/>
	</p>
}
else
{
	<br><h3>Select your base currency</h3>
	<p>SupportedCurrencies loans will be converted to your base currency. SupportedCurrencies calculations and reports will also be made using this currency.</p>
	<br>
	<MudSelect T="string" Label="Select Currency" Value="UserPreference.BaseCurrency" Variant="Variant.Text" ValueChanged="SavePreferredBaseCurrency">
		@foreach (CurrencyInfo currency in Currencies.SupportedCurrencies)
		{
			<MudSelectItem Value="@currency.AlphaCode">@currency.Name (@currency.Symbol)</MudSelectItem>
		}
	</MudSelect>
	
	<h3>Choose your strategy</h3>
	<select @onchange="OnStrategyChange" value="@UserPreference">
		@foreach (DebtPayDownMethodDto strategyType in _strategyTypes)
		{
			<option value="@strategyType.Id">@strategyType.Name</option>
		}
	</select>
}

@code {
	private IList<DebtPayDownMethodDto> _strategyTypes;

	[Parameter]
	public UserPreferenceDto UserPreference { get; set; }

	[Parameter]
	public EventCallback<UserPreferenceDto> SaveUserPreference { get; set; }

	private async Task SavePreferredBaseCurrency(string selectedCurrency)
	{
		Console.WriteLine("Inside SavePreferredBaseCurrency method");
		try
		{
			UserPreference.BaseCurrency = selectedCurrency;
			await SaveUserPreference.InvokeAsync(UserPreference);
			Snackbar.Add("Base currency saved successfully.", Severity.Success);
			Logger.LogInformation("Base currency saved successfully.");
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Error saving base currency: {ex.Message}", Severity.Error);
			Logger.LogError(ex, "Error saving base currency.");
		}
	}

	protected override async Task OnInitializedAsync()
	{
		_strategyTypes = await MultiPurposeService.GetAllStrategyTypes();
	}

	private async Task OnStrategyChange(ChangeEventArgs selectedStrategyId)
	{
		if (int.TryParse(selectedStrategyId.Value!.ToString(), out int parsedValue))
		{
			UserPreference.SelectedStrategy = parsedValue;
			await SaveUserPreference.InvokeAsync(UserPreference);
		}
	}

}