@using DebtSnowballer.Shared.DTOs
@using DebtSnowballer.Client.ClientSideServices
@inject ISnowflakeService SnowflakeService

<h3>
	<br>
</h3>

<h3>List all your Snowflakes</h3>
<br>

@if (SnowflakesInQuoteCurrency == null)
{
	<p>
		<em>Loading your Snowflakes...</em>
		<MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Value="75" Class="my-7"/>
	</p>
}
else
{
	<SnowflakeTable Snowflakes="SnowflakesInQuoteCurrency" GetCurrencySymbol="GetCurrencySymbol" OnEditSnowflake="EditSnowflake" OnDeleteSnowflake="DeleteSnowflake" AreActionsShown="true"/>
	<button class="btn btn-success" @onclick="OnAddNewSnowflake">Add New Snowflake</button>

	<h3>
		<br>
	</h3>

	<h3>Snowflakes converted to base currency</h3>
	<br>
	<SnowflakeTable Snowflakes="SnowflakesInBaseCurrency" GetCurrencySymbol="GetCurrencySymbol" OnEditSnowflake="EditSnowflake" OnDeleteSnowflake="DeleteSnowflake" AreActionsShown="false"/>

	<SnowflakeForm Snowflake="SelectedSnowflake" OnSave="OnSave" OnCancel="OnCancel"/>
}


@code {

	private SnowflakeDto _newSnowflake = new();
	private SnowflakeDto SelectedSnowflake { get; set; }

	[Parameter]
	public List<SnowflakeDto> SnowflakesInQuoteCurrency { get; set; }

	[Parameter]
	public List<SnowflakeDto> SnowflakesInBaseCurrency { get; set; }

	[Parameter]
	public Func<string, string> GetCurrencySymbol { get; set; }

	[Parameter]
	public Func<Task> LoadSnowflakesInQuoteCurrency { get; set; }

	[Parameter]
	public Func<Task> CalculateData { get; set; }


	private async Task EditSnowflake(int id)
	{
		SelectedSnowflake = await SnowflakeService.GetSnowflakeById(id);

		await LoadSnowflakesInQuoteCurrency();
		StateHasChanged();
		await CalculateData();
	}

	private void OnAddNewSnowflake()
	{
		SelectedSnowflake = new SnowflakeDto();

		LoadSnowflakesInQuoteCurrency();
		StateHasChanged();
		CalculateData();
	}

	private async Task OnSave(SnowflakeDto snowflake)
	{
		if (snowflake.Id == 0)
		{
			await SnowflakeService.AddSnowflake(snowflake);
		}
		else
		{
			await SnowflakeService.UpdateSnowflake(snowflake);
		}
		await LoadSnowflakesInQuoteCurrency();
		SelectedSnowflake = null;

		await LoadSnowflakesInQuoteCurrency();
		StateHasChanged();
		await CalculateData();
	}

	private void OnCancel()
	{
		SelectedSnowflake = null;
	}

	private async Task DeleteSnowflake(int id)
	{
		await SnowflakeService.DeleteSnowflake(id);

		await LoadSnowflakesInQuoteCurrency();
		StateHasChanged();
		await CalculateData();
	}

}