@using System.Reflection
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@using DebtSnowballer.Client.ClientSideServices
@inject LazyAssemblyLoader LazyAssemblyLoader

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserService UserService

<CascadingAuthenticationState>
	<Router AppAssembly="@typeof(App).Assembly" AdditionalAssemblies="@_lazyLoadedAssemblies">
		<Found Context="routeData">
			<AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
				<Authorizing>
					<div style="margin: 0 auto; width: 100vw; height: 100vh">
						<iframe id="splashScreen" src="splash.html" style="border:none; position:absolute; width:100%; height:100%"></iframe>
					</div>
				</Authorizing>
				<NotAuthorized>
					<h1>Sorry</h1>
					<p>You're not authorized to reach this page. You need to <a href="/authentication/login">log in.</a></p>
				</NotAuthorized>
			</AuthorizeRouteView>
			<FocusOnNavigate RouteData="@routeData" Selector="h1"/>
		</Found>
		<NotFound>
			<PageTitle>Not found</PageTitle>
			<LayoutView Layout="@typeof(MainLayout)">
				<p role="alert">Sorry, there's nothing at this address.</p>
			</LayoutView>
		</NotFound>
	</Router>
</CascadingAuthenticationState>

@code {
	private readonly List<Assembly> _lazyLoadedAssemblies = new();
	private bool _isFirstRender = true;

	protected override async Task OnAfterRenderAsync(bool firstRender)
		{
		if (firstRender)
			{
			AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
			ClaimsPrincipal user = authState.User;

			if (user.Identity.IsAuthenticated)
				{
					//TODO: load all user settings and cache them
				Console.WriteLine("Will load user preference.");
				await UserService.GetUserPreferenceAsync();
				Console.WriteLine("Loaded User Preference.");
				}

			_isFirstRender = false;
			}
		}
}
