@using DebtSnowballer.Shared.DTOs
@using DebtSnowballer.Client.ClientSideServices
@inject IDebtService DebtService

<table class="table">
	<thead>
	<tr>
		<th>NickName</th>
		<th>Frequency In Months</th>
		<th>Amount</th>
		<th>Start Date</th>
		<th>End Date</th>
		<th>CurrencyCode</th>
		@if (AreActionsShown)
		{
			<th>Actions</th>
		}
	</tr>
	</thead>
	<tbody>
	@foreach (PlannedSnowflakeDto snowflake in Snowflakes)
	{
		string currencySymbol = GetCurrencySymbol(snowflake.CurrencyCode);
		<tr>
			<td>@snowflake.Name</td>
			<td>@snowflake.FrequencyInMonths</td>
			<td>@currencySymbol @snowflake.Amount.ToString("N2")</td>
			<td>@snowflake.StartingAt</td>
			<td>@snowflake.EndingAt</td>
			<td>@snowflake.CurrencyCode</td>
			@if (AreActionsShown)
			{
				<td>
					<button class="btn btn-primary" @onclick="() => EditSnowflake(snowflake.Id)">Edit</button>
					<button class="btn btn-danger" @onclick="() => DeleteSnowflake(snowflake.Id)">Delete</button>
				</td>
			}
		</tr>
	}
	</tbody>
</table>

@code {

	[Parameter]
	public bool AreActionsShown { get; set; }

	[Parameter]
	public List<PlannedSnowflakeDto> Snowflakes { get; set; }

	[Parameter]
	public Func<string, string> GetCurrencySymbol { get; set; }

	[Parameter]
	public EventCallback<int> OnEditSnowflake { get; set; }

	[Parameter]
	public EventCallback<int> OnDeleteSnowflake { get; set; }

	private async Task EditSnowflake(int id)
	{
		await OnEditSnowflake.InvokeAsync(id);
	}

	private async Task DeleteSnowflake(int id)
	{
		await OnDeleteSnowflake.InvokeAsync(id);
	}

}