@using DebtSnowballer.Shared.DTOs
@using DebtSnowballer.Client.ClientSideServices
@using DebtSnowballer.Shared.Currency
@inject IDebtService DebtService

@inject ISnackbar Snackbar


<MudTable Items="@LoanDetails" CanCancelEditing="true">
	<ToolBarContent>
		<MudButton OnClick="AddLoan">Add Loan</MudButton>
	</ToolBarContent>
	<HeaderContent>
		<MudTh>Name</MudTh>
		<MudTh>Remaining Principal</MudTh>
		<MudTh>Interest Rate</MudTh>
		<MudTh>BankFees</MudTh>
		<MudTh>Monthly Payment</MudTh>
		<MudTh>Remaining Term</MudTh>
		<MudTh>Currency</MudTh>
		<MudTh></MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd DataLabel="Loan NickName">@context.Name</MudTd>
		<MudTd DataLabel="Remaining Principal">@context.RemainingPrincipal</MudTd>
		<MudTd DataLabel="Interest Rate">@context.AnnualInterestRate</MudTd>
		<MudTd DataLabel="BankFees">@context.BankFees</MudTd>
		<MudTd DataLabel="Monthly Payment">@context.ContractedMonthlyPayment</MudTd>
		<MudTd DataLabel="Remaining Term">@context.RemainingTermInMonths</MudTd>
		<MudTd DataLabel="Currency">@context.CurrencyCode</MudTd>
		<MudTd>
			<MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="@((e) => context.StartEdit())"></MudIconButton>
			<MudIconButton Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteLoan(context))"></MudIconButton> <!-- Delete Button -->
		</MudTd>
	</RowTemplate>
	<RowEditingTemplate>
		<MudTd DataLabel="Loan NickName">
			<MudTextField @bind-Value="@context.Name" Required />
		</MudTd>
		<MudTd DataLabel="Remaining Principal">
			<MudNumericField @bind-Value="@context.RemainingPrincipal" Required />
		</MudTd>
		<MudTd DataLabel="Interest Rate">
			<MudNumericField @bind-Value="@context.AnnualInterestRate" Required />
		</MudTd>
		<MudTd DataLabel="BankFees">
			<MudNumericField @bind-Value="@context.BankFees" Required />
		</MudTd>
		<MudTd DataLabel="Monthly Payment">
			<MudNumericField @bind-Value="@context.ContractedMonthlyPayment" Required />
		</MudTd>
		<MudTd DataLabel="Remaining Term">
			<MudNumericField @bind-Value="@context.RemainingTermInMonths" Required />
		</MudTd>
		<MudTd DataLabel="Currency">
			<MudTextField @bind-Value="@context.CurrencyCode" Required />
		</MudTd>
		<MudTd>
			<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@context.Commit">Save</MudButton>
			<MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="@context.Cancel">Cancel</MudButton>
		</MudTd>
	</RowEditingTemplate>
</MudTable>

@code {
	//private List<Loan> loans;

	// Define Loan class according to your model

	private void DeleteLoan(LoanDetailDto loan)
	{
	// Implement deletion logic here
		LoanDetails.Remove(loan);
	}

	private void AddLoan()
	{
	// Implement add loan logic here
	}
}



<br/>
<br />


<table class="table">
	<thead>
	<tr>
		<th>Loan Nickname</th>
		<th>Principal</th>
		<th>BankFees</th>
		<th>Monthly Payment</th>
		<th>Interest Rate</th>
		<th>Remaining Term</th>
		<th>Cardinal Order</th>
		<th>Currency</th>
		<th>Start Date</th>
		@if (AreActionsShown)
		{
			<th>Actions</th>
		}
	</tr>
	</thead>
	<tbody>
	@foreach (LoanDetailDto debt in LoanDetails)
	{
		string currencySymbol = GetCurrencySymbol(debt.CurrencyCode);
		<tr>
			<td>@debt.Name</td>
			<td>@currencySymbol @debt.RemainingPrincipal.ToString("N2")</td>
			<td>@currencySymbol @debt.BankFees.ToString("N2")</td>
			<td>@currencySymbol @debt.ContractedMonthlyPayment.ToString("N2")</td>
			<td>@debt.AnnualInterestRate.ToString("P2")</td>
			<td>@debt.RemainingTermInMonths</td>
			<td>@debt.CardinalOrder</td>
			<td>@debt.CurrencyCode</td>
			<td>@debt.StartDate</td>
			@if (AreActionsShown)
			{
				<td>
					<button class="btn btn-primary" @onclick="() => EditDebt(debt.Id)">Edit</button>
					<button class="btn btn-danger" @onclick="() => DeleteDebt(debt.Id)">Delete</button>
				</td>
			}
		</tr>
	}
	</tbody>
</table>

@code {

	[Parameter]
	public bool AreActionsShown { get; set; }

	[Parameter]
	public List<LoanDetailDto> LoanDetails { get; set; }

	[Parameter]
	public Func<string, string> GetCurrencySymbol { get; set; }

	[Parameter]
	public EventCallback<int> OnEditDebt { get; set; }

	[Parameter]
	public EventCallback<int> OnDeleteDebt { get; set; }

	private List<decimal> _chartData;

	protected override void OnParametersSet()
	{
		_chartData = LoanDetails.Select(debt => debt.RemainingPrincipal).ToList();
	}


	private async Task EditDebt(int id)
	{
		await OnEditDebt.InvokeAsync(id);
	}

	private async Task DeleteDebt(int id)
	{
		await OnDeleteDebt.InvokeAsync(id);
	}

}