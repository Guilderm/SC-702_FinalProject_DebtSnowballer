@using DebtSnowballer.Client.ClientSideServices.SolvencyEngine
@using DebtSnowballer.Shared.DTOs
@inject ISolvencyPlanner SolvencyPlanner
@inject NavigationManager NavigationManager

<h1>Amortization Schedule</h1>
<div>
	<MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels.ToArray()"></MudChart>
	<MudText Typo="Typo.h6">Interest Paid Over Time</MudText>
</div>

@foreach (var plan in DebtPayoffPlan.PaymentPlans)
{
	<h3>Strategy Name: @plan.Key</h3>
	<h4>Loan Details</h4>

	@foreach (AmortizationSchedule schedule in plan.Value)
	{
		string currencySymbol = GetCurrencySymbol(schedule.CurrencyCode);

		<h5>
			<br>@schedule.Name
		</h5>
		<p>Loans Currency: @schedule.CurrencyCode</p>
		<p>Annual Interest Rate: @schedule.AnnualInterestRate.ToString("P2")</p>
		<p>Bank Fees: @currencySymbol @schedule.BankFees.ToString("N2")</p>
		<p>Contracted Monthly Payment: @currencySymbol @schedule.ContractedMonthlyPayment.ToString("N2")</p>
		<br>
		<p>Total Interest Paid: @currencySymbol @schedule.TotalInterestPaid.ToString("N2")</p>
		<p>Total Bank Fees Paid: @currencySymbol @schedule.TotalBankFeesPaid.ToString("N2")</p>
		<p>Total Principal Paid: @currencySymbol @schedule.TotalPrincipalPaid.ToString("N2")</p>
		<p>Total ExtraPayment Paid: @currencySymbol @schedule.TotalExtraPayment.ToString("N2")</p>
		<br>
	}


	<table class="table">
		<thead>
		<tr>
			<th>Loan</th>
			<th>Month</th>
			<th>Date</th>
			<th>Interest Paid</th>
			<th>Bank Fees Paid</th>
			<th>Principal Paid</th>
			<th>Accumulated Interest Paid</th>
			<th>Accumulated Bank Fees Paid</th>
			<th>Accumulated Principal Paid</th>
			<th>Accumulated Extra Payment</th>
			<th>Unallocated Payment</th>
			<th>Extra Payment</th>
		</tr>
		</thead>
		<tbody>
		@foreach (PaymentInstallment detail in plan.Value.SelectMany(a => a.PaymentInstallments))
		{
			string currencySymbol = GetCurrencySymbol(detail.EndOfMonthLoanState.CurrencyCode);
			<tr>
				<td>@detail.EndOfMonthLoanState.Name</td>
				<td>@detail.PaymentMonth</td>
				<td>@detail.EndOfMonthLoanState.StartDate.ToString("yyyy-MM")</td>
				<td>@currencySymbol @detail.InterestPaid.ToString("N2")</td>
				<td>@currencySymbol @detail.BankFeesPaid.ToString("N2")</td>
				<td>@currencySymbol @detail.PrincipalPaid.ToString("N2")</td>
				<td>@currencySymbol @detail.AccumulatedInterestPaid.ToString("N2")</td>
				<td>@currencySymbol @detail.AccumulatedBankFeesPaid.ToString("N2")</td>
				<td>@currencySymbol @detail.AccumulatedPrincipalPaid.ToString("N2")</td>
				<td>@currencySymbol @detail.AccumulatedExtraPayment.ToString("N2")</td>
				<td>@currencySymbol @detail.UnallocatedPayment.ToString("N2")</td>
				<td>@currencySymbol @detail.ExtraPayment.ToString("N2")</td>
			</tr>
		}
		</tbody>
	</table>
}

@code {
	private DebtPayoffPlan DebtPayoffPlan { get; set; } = new();

	public List<ChartSeries> Series { get; set; } = new();
	public List<string> XAxisLabels { get; set; } = new();
	
	[Parameter]
	public UserPreferenceDto UserPreference { get; set; }

	[Parameter]
	public Func<string, string> GetCurrencySymbol { get; set; }

	[Parameter]
	public List<LoanDto> DebtsInBaseCurrency { get; set; }

	[Parameter]
	public List<SnowflakeDto> SnowflakesInBaseCurrency { get; set; }
	
	[Parameter]
	public Func<Task> CalculateData { get; set; }

	private void PopulateChartData()
	{
	// Clear existing data
		Series.Clear();
		XAxisLabels.Clear();

	// Iterate through payment plans and extract data
		foreach (var plan in DebtPayoffPlan.PaymentPlans)
		{
			var interestPaidData = new List<double>();
			foreach (PaymentInstallment detail in plan.Value.SelectMany(a => a.PaymentInstallments))
			{
				interestPaidData.Add((double)detail.InterestPaid);
				XAxisLabels.Add(detail.EndOfMonthLoanState.StartDate.ToString("MM-yyyy"));
			}
			Series.Add(new ChartSeries { Name = plan.Key, Data = interestPaidData.ToArray() });
		}
	}
	private async Task CreateDebtPayoffPlan()
	{
		if (DebtsInBaseCurrency is { Count: > 0 })
		{
			Console.WriteLine("Starting to create debt payoff plan...");
			DebtPayoffPlan = await SolvencyPlanner.CalculatePaymentPlansAsync(DebtsInBaseCurrency, SnowflakesInBaseCurrency, UserPreference.DebtPlanMonthlyPayment);
			Console.WriteLine("Debt payoff plan created successfully.");
			StateHasChanged();
			Console.WriteLine("State has changed after creating debt payoff plan.");
		}
		else
		{
			Console.WriteLine("No debts available. Debt payoff plan creation skipped.");
		}
	}

	private async Task CalculateDebtPayoffPlan()
		{
		await CalculateData();
		await CreateDebtPayoffPlan();
		}
}