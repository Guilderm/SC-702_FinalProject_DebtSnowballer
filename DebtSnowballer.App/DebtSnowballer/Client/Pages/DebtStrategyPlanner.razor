@page "/DebtStrategyPlanner"
@page "/DebtPlanManagement"
@using DebtSnowballer.Shared.DTOs
@using DebtSnowballer.Client.Services
@using DebtSnowballer.Shared.Currency
@using DebtSnowballer.Client.Components.DebtManagement

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDebtService DebtService
@inject IUserProfileService UserProfileService
@inject ISnowflakeService SnowflakeService

@attribute [Authorize]

<PageTitle>Debt Management</PageTitle>

<h3>Create a strategy to become debt free</h3>

<BaseCurrencyManagement BaseCurrency="@_userProfile.BaseCurrency" UpdateBaseCurrency="UpdateBaseCurrency" />

<DebtManagement Debts="@_debtsInQuoteCurrency" EditDebt="GetDebt" DeleteDebt="DeleteDebt" OnAddNewLoan="OnAddNewDebt" GetCurrencySymbol="GetCurrencySymbol" />

<DebtForm Debt="@_selectedDebt" OnSave="SaveDebt" OnCancel="CancelEdit" />

<MonthlyPaymentManagement DebtsInBaseCurrency="@_debtsInBaseCurrency" BaseCurrency="@_userProfile.BaseCurrency" GetCurrencySymbol="GetCurrencySymbol" DebtPlanMonthlyPayment="@_userProfile.DebtPlanMonthlyPayment" />

<SnowflakeManagement Snowflakes="@_snowflakes" OnAddNewSnowflake="OnAddNewSnowflake" EditSnowflake="GetSnowflake" DeleteSnowflake="DeleteSnowflake" GetCurrencySymbol="GetCurrencySymbol" />


@code {
	private List<DebtDto> _debtsInQuoteCurrency;
	private List<DebtDto> _debtsInBaseCurrency;
	private DebtDto _selectedDebt;
	private UserProfileDto _userProfile;
	private AuthenticationState _authState;
	private List<SnowflakeDto> _snowflakes;
	private SnowflakeDto _newSnowflake = new();

	protected override async Task OnInitializedAsync()
	{
		_authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		_userProfile = await UserProfileService.CreateUpdateUserProfile(_authState.User);
	
		await LoadDebtsInQuoteCurrency();
		await LoadDebtsInBaseCurrency();
		await LoadSnowflakes();
	}

	private async Task LoadDebtsInQuoteCurrency()
	{
		_debtsInQuoteCurrency = (await DebtService.GetAllDebtsInQuoteCurrency()).ToList();
		await LoadDebtsInBaseCurrency();
	}

	private async Task LoadDebtsInBaseCurrency()
	{
		_debtsInBaseCurrency = (await DebtService.GetAllDebtsInBaseCurrency()).ToList();
	}

	private async Task UpdateBaseCurrency(string selectedCurrency)
	{
		await UserProfileService.UpdateBaseCurrency(selectedCurrency);
		_userProfile.BaseCurrency = selectedCurrency;
		await LoadDebtsInBaseCurrency();
	}

	private void OnAddNewDebt()
	{
		_selectedDebt = new DebtDto();
	}

	private async Task GetDebt(int id)
	{
		_selectedDebt = await DebtService.GetDebtById(id);
	}

	private async Task DeleteDebt(int id)
	{
		await DebtService.DeleteDebt(id);
		await LoadDebtsInQuoteCurrency();
		await LoadDebtsInBaseCurrency();
	}

	private async Task SaveDebt(DebtDto debtItem)
	{
		if (debtItem.Id == 0)
		{
			await DebtService.AddDebt(debtItem);
		}
		else
		{
			await DebtService.UpdateDebt(debtItem);
		}

		await LoadDebtsInQuoteCurrency();
		await LoadDebtsInBaseCurrency();
		_selectedDebt = null;
	}

	private void CancelEdit()
	{
		_selectedDebt = null;
	}

	public string GetCurrencySymbol(string currencyCode)
	{
		CurrencyInfo currencyInfo = Currencies.SupportedCurrencies.FirstOrDefault(c => c.AlphaCode == currencyCode);
		return currencyInfo != null ? currencyInfo.Symbol : "$";
	}

	private async Task LoadSnowflakes()
	{
		_snowflakes = (await SnowflakeService.GetAllSnowflakes()).ToList();
	}

	private async void OnAddNewSnowflake()
	{
		SnowflakeDto addedSnowflake = await SnowflakeService.AddSnowflake(_newSnowflake);
		_newSnowflake = new SnowflakeDto();
		await LoadSnowflakes();
	}

	private async Task GetSnowflake(int id)
	{
		SnowflakeDto snowflake = await SnowflakeService.GetSnowflakeById(id);
	}

	private async Task DeleteSnowflake(int id)
	{
		await SnowflakeService.DeleteSnowflake(id);
		await LoadSnowflakes();
	}

}