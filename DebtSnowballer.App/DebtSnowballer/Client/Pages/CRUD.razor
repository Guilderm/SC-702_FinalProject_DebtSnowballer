@page "/crud"
@using DebtSnowballer.Shared.DTOs
@using DebtSnowballer.Client.Services
@inject HttpClient HttpClient
@inject IConfiguration Configuration

<h3>CRUD Operations</h3>

@if (crudItems == null)
{
	<p>
		<em>Loading...</em>
	</p>
}

else
{
	<table class="table">
		<thead>
		<tr>
			<th>Loan Name</th>
			<th>Principal</th>
			<th>Interest Rate</th>
			<th>Term (Months)</th>
			<th>Start Date</th>
			<th>End Date</th>
			<th>Actions</th>
		</tr>
		</thead>
		<tbody>
		@foreach (var item in crudItems)
		{
			<tr>
				<td>@item.LoanName</td>
				<td>@item.Principal</td>
				<td>@item.InterestRate</td>
				<td>@item.TermMonths</td>
				<td>@item.StartDate.ToShortDateString()</td>
				<td>@(item.EndDate.HasValue ? item.EndDate.Value.ToShortDateString() : "N/A")</td>
				<td>
					<button class="btn btn-primary" @onclick="() => LoadCrudItem(item.Id)">Edit</button>
					<button class="btn btn-danger" @onclick="() => DeleteCrudItem(item.Id)">Delete</button>
				</td>
			</tr>
		}
		</tbody>
	</table>

	<button class="btn btn-success" @onclick="NewCrudItem">Create New Item</button>

	@if (selectedCrudItem != null)
	{
		<h3>@(selectedCrudItem.Id == 0 ? "Add Item" : "Edit Item")</h3>

		<EditForm Model="selectedCrudItem" OnValidSubmit="SaveCrudItem" @key="selectedCrudItem">
			<DataAnnotationsValidator/>
			<ValidationSummary/>

			<div class="form-group">
				<label for="LoanName">Loan Name:</label>
				<InputText id="LoanName" class="form-control" @bind-Value="selectedCrudItem.LoanName"/>
			</div>

			<div class="form-group">
				<label for="Principal">Principal:</label>
				<InputNumber id="Principal" class="form-control" @bind-Value="selectedCrudItem.Principal"/>
			</div>

			<div class="form-group">
				<label for="InterestRate">Interest Rate:</label>
				<InputNumber id="InterestRate" class="form-control" @bind-Value="selectedCrudItem.InterestRate"/>
			</div>

			<div class="form-group">
				<label for="TermMonths">Term (Months):</label>
				<InputNumber id="TermMonths" class="form-control" @bind-Value="selectedCrudItem.TermMonths"/>
			</div>

			<div class="form-group">
				<label for="StartDate">Start Date:</label>
				<InputDate id="StartDate" class="form-control" @bind-Value="selectedCrudItem.StartDate"/>
			</div>

			<div class="form-group">
				<label for="EndDate">End Date:</label>
				<InputDate id="EndDate" class="form-control" @bind-Value="selectedCrudItem.EndDate"/>
			</div>

			<button type="submit" class="btn btn-success">@(selectedCrudItem.Id == 0 ? "Add" : "Update")</button>
		</EditForm>
	}
}

@code {
	private List<CrudDto> crudItems;
	private CrudDto selectedCrudItem;
	private IGenericService<CrudDto> CrudService;

	protected override async Task OnInitializedAsync()
	{
		var fullUrl = Configuration["ApiEndpoint:Url"] + "/crud";
		CrudService = new GenericService<CrudDto>(HttpClient, fullUrl);
		await LoadCrudItems();
	}

	private async Task LoadCrudItems()
	{
		crudItems = await CrudService.GetItems();
	}

	private void NewCrudItem()
	{
		selectedCrudItem = new CrudDto();
	}

	private async Task LoadCrudItem(int id)
	{
		selectedCrudItem = await CrudService.GetItem(id);
	}

	private async Task SaveCrudItem()
	{
		if (selectedCrudItem.Id == 0)
		{
			await CrudService.AddItem(selectedCrudItem);
		}
		else
		{
			await CrudService.UpdateItem(selectedCrudItem);
		}

		selectedCrudItem = null;

		await LoadCrudItems();
	}

	private async Task DeleteCrudItem(int id)
	{
		await CrudService.DeleteItem(id);
		await LoadCrudItems();
	}

}