@using DebtSnowballer.Shared.DTOs
@using DebtSnowballer.Shared.Currency
@using DebtSnowballer.Client.Services
@inject IUserProfileService UserProfileService
<br>
<br>

@if (DebtsInBaseCurrency != null)
    {
    <div class="summary">
        <p>Total Amount Owed in Base Currency: <strong>@GetCurrencySymbol(BaseCurrencyCode) @TotalAmountOwed.ToString("N2")</strong></p>
        <p>Total Monthly Payment in Base Currency: <strong>@GetCurrencySymbol(BaseCurrencyCode) @ContractedMonthlyPayment.ToString("N2")</strong></p>
        <p>Preferred Monthly Payment in Base Currency: <strong>@GetCurrencySymbol(BaseCurrencyCode) @PreferredMonthlyPayment.ToString("N2")</strong></p>
        <input @bind-value="PreferredMonthlyPayment" @bind-value:event="oninput" @onchange="UpdatePreferredMonthlyPayment" type="number" min="@ContractedMonthlyPayment" step="5" />
    </div>
    }

@code {
    private decimal TotalAmountOwed => DebtsInBaseCurrency.Sum(debt => debt.RemainingPrincipal);
    private decimal ContractedMonthlyPayment => DebtsInBaseCurrency.Sum(debt => debt.MonthlyPayment);
    private decimal PreferredMonthlyPayment { get; set; }

    [Parameter]
    public List<DebtDto> DebtsInBaseCurrency { get; set; }

    [Parameter]
    public string BaseCurrencyCode { get; set; }

    [Parameter]
    public Func<string, string> GetCurrencySymbol { get; set; }

    protected override Task OnParametersSetAsync()
    {
        if (DebtsInBaseCurrency != null && PreferredMonthlyPayment < ContractedMonthlyPayment)
            {
            PreferredMonthlyPayment = ContractedMonthlyPayment;
            }
	    return Task.CompletedTask;
    }

    private async Task UpdatePreferredMonthlyPayment(ChangeEventArgs e)
        {
        if (decimal.TryParse(e.Value?.ToString(), out decimal newPreferredMonthlyPayment))
            {
            if (newPreferredMonthlyPayment > ContractedMonthlyPayment)
                {
                await UserProfileService.UpdatePreferredMonthlyPayment(newPreferredMonthlyPayment);
                }
            else
                {
                PreferredMonthlyPayment = ContractedMonthlyPayment;
                }
            }
        }
}
