@using DebtSnowballer.Shared.DTOs
@using DebtSnowballer.Client.ClientSideServices
@using DebtSnowballer.Shared.Currency
@inject IDebtService DebtService

@inject ISnackbar Snackbar


<MudTable Items="@LoanDetails" Dense="true" SortLabel="Sort By" CanCancelEditing="true" EditTrigger="TableEditTrigger.EditButton">
	<HeaderContent>
		<MudTh><MudTableSortLabel SortBy="new Func<LoanDetailDto, object>(x=>x.Name)">Loan NickName</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<LoanDetailDto, object>(x=>x.RemainingPrincipal)">Remaining Principal</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<LoanDetailDto, object>(x=>x.AnnualInterestRate)">Interest Rate</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<LoanDetailDto, object>(x=>x.BankFees)">BankFees</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<LoanDetailDto, object>(x=>x.ContractedMonthlyPayment)">Monthly Payment</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<LoanDetailDto, object>(x=>x.RemainingTermInMonths)">Remaining Term</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<LoanDetailDto, object>(x=>x.CurrencyCode)">Currency</MudTableSortLabel></MudTh><MudTh></MudTh>
	</HeaderContent>
	<RowTemplate>
		@if (_loanInEditMode == context)
			{
			<MudTd DataLabel="Loan NickName">
				<MudTextField @bind-Value="@context.Name" Required />
		</MudTd>
			<MudTd DataLabel="Remaining Principal">
				<MudNumericField @bind-Value="@context.RemainingPrincipal" Required />
		</MudTd>
			<MudTd DataLabel="Interest Rate">
				<MudNumericField @bind-Value="@context.AnnualInterestRate" Required />
		</MudTd>
			<MudTd DataLabel="BankFees">
				<MudNumericField @bind-Value="@context.BankFees" Required />
		</MudTd>
			<MudTd DataLabel="Monthly Payment">
				<MudNumericField @bind-Value="@context.ContractedMonthlyPayment" Required />
		</MudTd>
			<MudTd DataLabel="Remaining Term">
				<MudNumericField @bind-Value="@context.RemainingTermInMonths" Required />
		</MudTd>
			<MudTd DataLabel="Currency">
				<MudTextField @bind-Value="@context.CurrencyCode" Required />
		</MudTd>
			<MudTd>
				<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="(() => EditDebt(context.Id))">Save</MudButton>
				<MudButton Variant="Variant.Filled" Color="Color.Default">Cancel</MudButton>
			</MudTd>
			}
		else
			{
			<MudTd DataLabel="Loan NickName">@context.Name</MudTd>
			<MudTd DataLabel="Remaining Principal">@GetCurrencySymbol(context.CurrencyCode) @context.RemainingPrincipal.ToString("N2")</MudTd>
			<MudTd DataLabel="Interest Rate">@context.AnnualInterestRate.ToString("P2")</MudTd>
			<MudTd DataLabel="BankFees">@GetCurrencySymbol(context.CurrencyCode) @context.BankFees.ToString("N2")</MudTd>
			<MudTd DataLabel="Monthly Payment">@GetCurrencySymbol(context.CurrencyCode) @context.ContractedMonthlyPayment.ToString("N2")</MudTd>
			<MudTd DataLabel="Remaining Term">@context.RemainingTermInMonths</MudTd>
			<MudTd DataLabel="Currency">@context.CurrencyCode</MudTd>
			<MudTd DataLabel="Start Date">@context.StartDate.ToString("yyyy-MM")</MudTd>
			<MudTd>
				<MudIconButton Icon="@Icons.Material.Outlined.Delete" OnClick="(() => DeleteDebt(context.Id))"></MudIconButton>
			</MudTd>
			}
	</RowTemplate>

	<EditButtonContent Context="button">
		<MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction"/>
	</EditButtonContent>
	<FooterContent>
		<MudButton OnClick="AddNewLoan" Variant="Variant.Filled" Color="Color.Primary">Add Loan</MudButton>
	</FooterContent>
</MudTable>




@code {

	[Parameter]
	public bool AreActionsShown { get; set; }

	[Parameter]
	public List<LoanDetailDto> LoanDetails { get; set; }

	[Parameter]
	public Func<string, string> GetCurrencySymbol { get; set; }

	[Parameter]
	public EventCallback<int> OnEditDebt { get; set; }

	[Parameter]
	public EventCallback<int> OnDeleteDebt { get; set; }

	private async Task EditDebt(int id)
	{
		await OnEditDebt.InvokeAsync(id);
	}

	private async Task DeleteDebt(int id)
	{
		await OnDeleteDebt.InvokeAsync(id);
	}

	private LoanDetailDto _loanInEditMode;

	private void AddNewLoan()
	{
		LoanDetailDto newLoan = new LoanDetailDto(); // Set the initial properties as needed
		LoanDetails.Add(newLoan);
		EnterEditMode(newLoan);
	}

	private void EnterEditMode(LoanDetailDto loan)
	{
		_loanInEditMode = loan;
		StateHasChanged();
	}
}