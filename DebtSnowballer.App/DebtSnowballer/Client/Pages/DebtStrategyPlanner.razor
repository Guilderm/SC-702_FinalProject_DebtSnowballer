@page "/DebtStrategyPlanner"
@page "/DebtPlanManagement"
@using DebtSnowballer.Shared.DTOs
@using DebtSnowballer.Client.ClientSideServices
@using DebtSnowballer.Shared.Currency
@using DebtSnowballer.Client.Components.DebtManagement

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDebtService DebtService
@inject IUserProfileService UserProfileService
@inject ISnowflakeService SnowflakeService

@attribute [Authorize]

<PageTitle>Debt Management</PageTitle>

<h3>Create a strategy to become debt free</h3>

@if (_isAllDataLoaded)
{
	<BaseCurrencyManagement BaseCurrency="@_userProfile.BaseCurrency" UpdateBaseCurrency="UpdateBaseCurrency"/>

	<DebtManagement DebtsInQuoteCurrency="@_debtsInQuoteCurrency" DebtsInBaseCurrency="@_debtsInBaseCurrency" LoadDebtsInQuoteCurrency="LoadDebtsInQuoteCurrency" LoadDebtsInBaseCurrency="ConvertDebtsToBaseCurrency" GetCurrencySymbol="GetCurrencySymbol"/>

	<MonthlyPaymentManagement DebtsInBaseCurrency="@_debtsInBaseCurrency" BaseCurrency="@_userProfile.BaseCurrency" GetCurrencySymbol="GetCurrencySymbol" DebtPlanMonthlyPayment="@_userProfile.DebtPlanMonthlyPayment"/>

	<SnowflakeManagement SnowflakesInQuoteCurrency="@_snowflakesInQuoteCurrency" SnowflakesInBaseCurrency="@_snowflakesInBaseCurrency" LoadSnowflakesInQuoteCurrency="LoadSnowflakesInQuoteCurrency" GetCurrencySymbol="GetCurrencySymbol"/>

	<StrategyTypesManagement UserStrategyType="@_userProfile.SelectedStrategy" UpdateSelectedStrategy="UpdateSelectedStrategy"/>
}
else
{
	<p>Loading your data...</p>
}

@code {
	private bool _isAllDataLoaded;
	private List<DebtDto> _debtsInQuoteCurrency;
	private List<DebtDto> _debtsInBaseCurrency;
	private List<SnowflakeDto> _snowflakesInQuoteCurrency;
	private List<SnowflakeDto> _snowflakesInBaseCurrency;
	private UserProfileDto _userProfile;
	private AuthenticationState _authState;
	private IList<ExchangeRateDto> _usersExchangeRates;

	protected override async Task OnInitializedAsync()
	{
	// TODO: Need to get this data from the backend with out getting any data from front end.
		_authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		await LoadUserProfile();

		await LoadExchangeRates();
		await LoadDebtsInQuoteCurrency();
		await LoadSnowflakesInQuoteCurrency();

		_isAllDataLoaded = true;

		await ConvertDebtsToBaseCurrency();
		await ConvertSnowflakesToBaseCurrency();
	}

	private async Task LoadExchangeRates()
	{
		_usersExchangeRates = await DebtService.GetUsersExchangeRates(_authState.User);
	}

	private async Task LoadUserProfile()
	{
		_userProfile = await UserProfileService.CreateUpdateUserProfile(_authState.User);
	}

	private async Task LoadDebtsInQuoteCurrency()
	{
		_debtsInQuoteCurrency = (await DebtService.GetAllDebtsInQuoteCurrency()).ToList();
		await ConvertDebtsToBaseCurrency();
	}

	private Task ConvertDebtsToBaseCurrency()
	{
		_debtsInBaseCurrency = new List<DebtDto>();

		foreach (DebtDto debt in _debtsInQuoteCurrency)
		{
			ExchangeRateDto debtToBaseRate = _usersExchangeRates.FirstOrDefault(x => x.QuoteCurrency == debt.CurrencyCode);

			if (debtToBaseRate != null)
			{
				DebtDto convertedDebt = new()
				{
					Id = debt.Id,
					NickName = debt.NickName,
					RemainingPrincipal = debt.RemainingPrincipal * debtToBaseRate.ConversionRate,
					BankFees = debt.BankFees * debtToBaseRate.ConversionRate,
					MonthlyPayment = debt.MonthlyPayment * debtToBaseRate.ConversionRate,
					AnnualInterestRate = debt.AnnualInterestRate,
					RemainingTermInMonths = debt.RemainingTermInMonths,
					CardinalOrder = debt.CardinalOrder,
					CurrencyCode = _userProfile.BaseCurrency
				};

				_debtsInBaseCurrency.Add(convertedDebt);
			}
			else
			{
	// If there's no exchange rate for the debt's currency, add the debt as is.
				_debtsInBaseCurrency.Add(debt);
			}
		}

		return Task.CompletedTask;
	}

	private Task ConvertSnowflakesToBaseCurrency()
	{
		_snowflakesInBaseCurrency = new List<SnowflakeDto>();

		foreach (SnowflakeDto snowflake in _snowflakesInQuoteCurrency)
		{
			ExchangeRateDto debtToBaseRate = _usersExchangeRates.FirstOrDefault(x => x.QuoteCurrency == snowflake.CurrencyCode);

			if (debtToBaseRate != null)
			{
				SnowflakeDto convertedSnowflake = new()
				{
					Id = snowflake.Id,
					NickName = snowflake.NickName,
					Amount = snowflake.Amount * debtToBaseRate.ConversionRate,
					FrequencyInMonths = snowflake.FrequencyInMonths,
					StartingAt = snowflake.StartingAt,
					EndingAt = snowflake.EndingAt,
					CurrencyCode = _userProfile.BaseCurrency
				};

				_snowflakesInBaseCurrency.Add(convertedSnowflake);
			}
			else
			{
	// If there's no exchange rate for the snowflake's currency, add the snowflake as is.
				_snowflakesInBaseCurrency.Add(snowflake);
			}
		}

		return Task.CompletedTask;
	}

	private async Task UpdateBaseCurrency(string selectedCurrency)
	{
		await UserProfileService.UpdateBaseCurrency(selectedCurrency);
		_userProfile.BaseCurrency = selectedCurrency;
		await ConvertDebtsToBaseCurrency();
	}

	public string GetCurrencySymbol(string currencyCode)
	{
		CurrencyInfo currencyInfo = Currencies.SupportedCurrencies.FirstOrDefault(c => c.AlphaCode == currencyCode);
		return currencyInfo != null ? currencyInfo.Symbol : "$";
	}

	private async Task LoadSnowflakesInQuoteCurrency()
	{
		_snowflakesInQuoteCurrency = (await SnowflakeService.GetAllSnowflakes()).ToList();
		await ConvertSnowflakesToBaseCurrency();
		StateHasChanged();
	}

	private async Task UpdateSelectedStrategy(int selectedCurrency)
	{
		_userProfile.SelectedStrategy = selectedCurrency;
		_userProfile = await UserProfileService.UpdateSelectedStrategy(selectedCurrency);
	}

}