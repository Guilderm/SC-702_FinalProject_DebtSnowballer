@page "/StrategyManager"
@using DebtSnowballer.Shared.DTOs
@using DebtSnowballer.Client.ClientSideServices.FinancialFreedom
@using DebtSnowballer.Client.ClientSideServices
@using DebtSnowballer.Shared.Currency
@using DebtSnowballer.Client.Components.DebtManagement
@using AmortizationSchedule = DebtSnowballer.Client.ClientSideServices.FinancialFreedom.AmortizationSchedule

@inject IDebtService DebtService
@inject IUserService UserService
@inject ISnowflakeService SnowflakeService
@inject IFinancialFreedomPlanner FinancialFreedomPlanner


@attribute [Authorize]

<PageTitle>Debt Management</PageTitle>

<h3>Create a strategy to become debt free</h3>

@if (_isEssentialDataLoaded)
{
	<BaseCurrencyManagement UserPreference="@_userPreference" SaveUserPreference="SaveUserPreference"/>

	<DebtManagement DebtsInQuoteCurrency="@_debtsInQuoteCurrency" DebtsInBaseCurrency="@_debtsInBaseCurrency" LoadDebtsInQuoteCurrency="LoadDebtsInQuoteCurrency" CalculateData="CalculateData" GetCurrencySymbol="GetCurrencySymbol"/>
	@if (_isDataCalculated)
	{
		<SnowflakeManagement SnowflakesInQuoteCurrency="@_snowflakesInQuoteCurrency" SnowflakesInBaseCurrency="@_snowflakesInBaseCurrency" LoadSnowflakesInQuoteCurrency="LoadSnowflakesInQuoteCurrency" CalculateData="CalculateData" GetCurrencySymbol="GetCurrencySymbol"/>

		<StrategyManagement UserPreference="@_userPreference" SaveUserPreference="SaveUserPreference"/>

		<PlanAnalyse UserPreference="@_userPreference" SaveUserPreference="SaveUserPreference" DebtsInBaseCurrency="@_debtsInBaseCurrency" GetCurrencySymbol="GetCurrencySymbol"/>

		<AmortizationSchedule DebtPayoffPlan="@DebtPayoffPlan" GetCurrencySymbol="GetCurrencySymbol"/>
	}
}
else
{
	<p>Loading your data...</p>
	<MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Value="75" Class="my-7"/>
}


@code {
	private bool _isEssentialDataLoaded;
	private bool _isDataCalculated;
	private List<LoanDto> _debtsInQuoteCurrency;
	private List<LoanDto> _debtsInBaseCurrency;
	private List<SnowflakeDto> _snowflakesInQuoteCurrency;
	private List<SnowflakeDto> _snowflakesInBaseCurrency;
	private UserPreferenceDto _userPreference;
	private IList<ExchangeRateDto> _usersExchangeRates;
	private DebtPayoffPlan DebtPayoffPlan { get; set; }


	protected override async Task OnInitializedAsync()
	{
		Console.WriteLine("Initializing Strategy Planner");
		Console.WriteLine("Starting concurrent tasks: loading user Preference, exchange rates, debts in quote currency, and snowflakes in quote currency.");
		Task loadUserPreference = LoadUserPreference();
		Task loadExchangeRatesTask = LoadExchangeRates();
		Task loadDebtsInQuoteCurrencyTask = LoadDebtsInQuoteCurrency();
		Task loadSnowflakesInQuoteCurrencyTask = LoadSnowflakesInQuoteCurrency();
		await Task.WhenAll(loadUserPreference, loadExchangeRatesTask, loadDebtsInQuoteCurrencyTask, loadSnowflakesInQuoteCurrencyTask);
		_isEssentialDataLoaded = true;
		StateHasChanged();
		Console.WriteLine("Concurrent tasks completed.");

		await CalculateData();
		_isDataCalculated = true;
		Console.WriteLine("Component initialization complete.");
	}

	private async Task LoadUserPreference()
	{
		_userPreference = await UserService.GetUserPreferenceAsync();
		Console.WriteLine("Loaded User Preference.");
	}

	private async Task SaveUserPreference(UserPreferenceDto userPreference)
	{
		_userPreference = await UserService.UpdateUserPreferenceAsync(userPreference);
		Console.WriteLine("Saved User Preference.");

		await CalculateData();
		StateHasChanged();
	}

	private async Task LoadExchangeRates()
	{
		_usersExchangeRates = await DebtService.GetUsersExchangeRates();
		Console.WriteLine($"Loaded {_usersExchangeRates?.Count ?? 0} exchange rates.");
	}


	private async Task LoadDebtsInQuoteCurrency()
	{
		Console.WriteLine("Starting to load debts in quote currency...");
		_debtsInQuoteCurrency = (await DebtService.GetAllDebtsInQuoteCurrency()).ToList();
		Console.WriteLine($"Loaded {_debtsInQuoteCurrency?.Count ?? 0} debts in quote currency.");

		StateHasChanged();
		Console.WriteLine("Component state updated with DebtsInQuoteCurrency.");
	}


	private Task ConvertDebtsToBaseCurrency()
	{
		_debtsInBaseCurrency = new List<LoanDto>();

		if (_usersExchangeRates == null)
		{
			Console.WriteLine("No exchange rates loaded. Conversion skipped.");
			return Task.CompletedTask;
		}

		foreach (LoanDto debt in _debtsInQuoteCurrency)
		{
			ExchangeRateDto baseRate = _usersExchangeRates.FirstOrDefault(x => x.QuoteCurrency == debt.CurrencyCode);
			if (baseRate != null)
			{
				Console.WriteLine($"Converting debt with ID {debt.Id} using base rate for currency {baseRate.QuoteCurrency}: {baseRate.ConversionRate}");

				LoanDto convertedLoan = new()
				{
					Id = debt.Id,
					Name = debt.Name,
					Auth0UserId = debt.Auth0UserId,
					RemainingPrincipal = debt.RemainingPrincipal * baseRate.ConversionRate,
					BankFees = debt.BankFees * baseRate.ConversionRate,
					ContractedMonthlyPayment = debt.ContractedMonthlyPayment * baseRate.ConversionRate,
					AnnualInterestRate = debt.AnnualInterestRate,
					RemainingTermInMonths = debt.RemainingTermInMonths,
					CardinalOrder = debt.CardinalOrder,
					CurrencyCode = _userPreference.BaseCurrency,
					StartDate = debt.StartDate
				};

				_debtsInBaseCurrency.Add(convertedLoan);
			}
			else
			{
				Console.WriteLine($"No exchange rate found for debt with ID {debt.Id} and currency code {debt.CurrencyCode}. Conversion skipped.");
			}
		}

		return Task.CompletedTask;
	}


	private Task ConvertSnowflakesToQuoteCurrency()
	{
		_snowflakesInBaseCurrency = new List<SnowflakeDto>();

		if (_usersExchangeRates == null)
		{
			Console.WriteLine("No exchange rates loaded. Conversion skipped.");
			return Task.CompletedTask;
		}

		foreach (SnowflakeDto snowflake in _snowflakesInQuoteCurrency)
		{
			if (_usersExchangeRates.FirstOrDefault(x => x.QuoteCurrency == snowflake.CurrencyCode) is { } baseRate)
			{
				Console.WriteLine($"Converting debt with ID {snowflake.Id} using base rate for currency {baseRate.QuoteCurrency}: {baseRate.ConversionRate}");
				SnowflakeDto convertedSnowflake = new()
				{
					Id = snowflake.Id,
					Name = snowflake.Name,
					Amount = snowflake.Amount * baseRate.ConversionRate,
					FrequencyInMonths = snowflake.FrequencyInMonths,
					StartingAt = snowflake.StartingAt,
					EndingAt = snowflake.EndingAt,
					CurrencyCode = _userPreference.BaseCurrency
				};

				_snowflakesInBaseCurrency.Add(convertedSnowflake);
			}
		}
		return Task.CompletedTask;
	}

	public string GetCurrencySymbol(string currencyCode)
	{
		Console.WriteLine($"Attempting to retrieve symbol for currency code: {currencyCode}...");
		CurrencyInfo currencyInfo = Currencies.SupportedCurrencies.FirstOrDefault(c => c.AlphaCode == currencyCode);
		string symbol = currencyInfo != null ? currencyInfo.Symbol : "$";
		Console.WriteLine($"Retrieved symbol for currency code {currencyCode}: {symbol}");
		return symbol;
	}

	private async Task LoadSnowflakesInQuoteCurrency()
	{
		Console.WriteLine("Starting to load snowflakes in quote currency...");
		_snowflakesInQuoteCurrency = (await SnowflakeService.GetAllSnowflakes()).ToList();
		Console.WriteLine($"Loaded {_snowflakesInQuoteCurrency?.Count ?? 0} snowflakes in quote currency.");

		StateHasChanged();
		Console.WriteLine("State has changed after loading snowflakes in Quote Currency.");
	}

	private async Task CreateDebtPayoffPlan()
	{
		if (_debtsInBaseCurrency is {Count: > 0 })
		{
			Console.WriteLine("Starting to create debt payoff plan...");
			DebtPayoffPlan = await FinancialFreedomPlanner.CalculatePaymentPlansAsync(_debtsInBaseCurrency, _snowflakesInBaseCurrency, _userPreference.DebtPlanMonthlyPayment);
			Console.WriteLine("Debt payoff plan created successfully.");
			StateHasChanged();
			Console.WriteLine("State has changed after creating debt payoff plan.");
		}
		else
		{
			Console.WriteLine("No debts available. Debt payoff plan creation skipped.");
		}
	}

	private async Task CalculateData()
	{
		await ConvertDebtsToBaseCurrency();
		await ConvertSnowflakesToQuoteCurrency();
		await CreateDebtPayoffPlan();
	}

}