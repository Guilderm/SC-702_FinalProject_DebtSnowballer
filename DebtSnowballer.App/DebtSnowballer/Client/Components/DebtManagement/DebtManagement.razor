@using DebtSnowballer.Shared.DTOs
@using DebtSnowballer.Client.ClientSideServices
@inject IDebtService DebtService

<h3>
	<br>
</h3>

<h3>Loan List</h3>
<br>
@if (DebtsInQuoteCurrency == null)
{
	<p>
		<em>Loading debts...</em>
		<MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Value="75" Class="my-7" />
	</p>
}
else
{
		<h3>List all your Debts in their respective</h3>
	<br>
	<DebtTable LoanDetails="DebtsInQuoteCurrency" GetCurrencySymbol="GetCurrencySymbol" OnEditDebt="EditDebt" OnDeleteDebt="DeleteDebt" IsReadOnly="false" />

	<h3>
		<br>
	</h3>

	<h3>Debts converted to base currency</h3>
	<br>
	<DebtTable LoanDetails="DebtsInBaseCurrency" GetCurrencySymbol="GetCurrencySymbol" OnEditDebt="EditDebt" OnDeleteDebt="DeleteDebt" IsReadOnly="true" />

	}


@code {
	private LoanDetailDto _selectedLoanDetail;

	[Parameter]
	public List<LoanDetailDto> DebtsInQuoteCurrency { get; set; }

	[Parameter]
	public List<LoanDetailDto> DebtsInBaseCurrency { get; set; }

	[Parameter]
	public Func<string, string> GetCurrencySymbol { get; set; }

	[Parameter]
	public Func<Task> LoadDebtsInQuoteCurrency { get; set; }

	[Parameter]
	public Func<Task> CalculateData { get; set; }


	private void OnAddNewDebt()
	{
		_selectedLoanDetail = new LoanDetailDto();
	}

	private async Task EditDebt(int id)
	{
		_selectedLoanDetail = await DebtService.GetDebtById(id);

		await LoadDebtsInQuoteCurrency();
		StateHasChanged();
		await CalculateData();
	}

	private async Task DeleteDebt(int id)
	{
		await DebtService.DeleteDebt(id);

		await LoadDebtsInQuoteCurrency();
		StateHasChanged();
		await CalculateData();
	}

	private async Task SaveDebt(LoanDetailDto loanDetailItem)
	{
		if (loanDetailItem.Id == 0)
		{
			await DebtService.AddDebt(loanDetailItem);
		}
		else
		{
			await DebtService.UpdateDebt(loanDetailItem);
		}

		_selectedLoanDetail = null;

		await LoadDebtsInQuoteCurrency();
		StateHasChanged();
		await CalculateData();
	}

	private void CancelEdit()
	{
		_selectedLoanDetail = null;
	}

}