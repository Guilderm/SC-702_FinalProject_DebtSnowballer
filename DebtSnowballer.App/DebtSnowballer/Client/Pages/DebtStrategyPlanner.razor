@page "/DebtStrategyPlanner"
@page "/DebtPlanManagement"
@using DebtSnowballer.Shared.DTOs
@using DebtSnowballer.Client.Services
@using DebtSnowballer.Shared.Currency
@using DebtSnowballer.Client.Components.DebtManagement

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDebtService DebtService
@inject IUserProfileService UserProfileService
@inject ISnowflakeService SnowflakeService

@attribute [Authorize]

<PageTitle>Debt Management</PageTitle>

<h3>Create a strategy to become debt free</h3>

<BaseCurrencyManagement BaseCurrency="@_userProfile.BaseCurrency" UpdateBaseCurrency="UpdateBaseCurrency" />

<DebtManagement DebtsInQuoteCurrency="@_debtsInQuoteCurrency" LoadDebtsInQuoteCurrency="LoadDebtsInQuoteCurrency" LoadDebtsInBaseCurrency="LoadDebtsInBaseCurrency" GetCurrencySymbol="GetCurrencySymbol" />

<MonthlyPaymentManagement DebtsInBaseCurrency="@_debtsInBaseCurrency" BaseCurrency="@_userProfile.BaseCurrency" GetCurrencySymbol="GetCurrencySymbol" DebtPlanMonthlyPayment="@_userProfile.DebtPlanMonthlyPayment" />

<SnowflakeManagement SnowflakesInQuoteCurrency="@_snowflakesInQuoteCurrency" LoadSnowflakesInQuoteCurrency="LoadSnowflakesInQuoteCurrency" GetCurrencySymbol="GetCurrencySymbol" />


@code {
	private List<DebtDto> _debtsInQuoteCurrency;
	private List<DebtDto> _debtsInBaseCurrency;
	private UserProfileDto _userProfile;
	private AuthenticationState _authState;
	private List<SnowflakeDto> _snowflakesInQuoteCurrency;

	protected override async Task OnInitializedAsync()
	{
		_authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		_userProfile = await UserProfileService.CreateUpdateUserProfile(_authState.User);
	
		await LoadDebtsInQuoteCurrency();
		await LoadDebtsInBaseCurrency();
		await LoadSnowflakesInQuoteCurrency();
	}

	private async Task LoadDebtsInQuoteCurrency()
	{
		_debtsInQuoteCurrency = (await DebtService.GetAllDebtsInQuoteCurrency()).ToList();
		await LoadDebtsInBaseCurrency();
	}

	private async Task LoadDebtsInBaseCurrency()
	{
		_debtsInBaseCurrency = (await DebtService.GetAllDebtsInBaseCurrency()).ToList();
	}

	private async Task UpdateBaseCurrency(string selectedCurrency)
	{
		await UserProfileService.UpdateBaseCurrency(selectedCurrency);
		_userProfile.BaseCurrency = selectedCurrency;
		await LoadDebtsInBaseCurrency();
	}
	
	public string GetCurrencySymbol(string currencyCode)
	{
		CurrencyInfo currencyInfo = Currencies.SupportedCurrencies.FirstOrDefault(c => c.AlphaCode == currencyCode);
		return currencyInfo != null ? currencyInfo.Symbol : "$";
	}

	private async Task LoadSnowflakesInQuoteCurrency()
	{
		_snowflakesInQuoteCurrency = (await SnowflakeService.GetAllSnowflakes()).ToList();
	}
}